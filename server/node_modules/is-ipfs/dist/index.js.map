{"version":3,"sources":["webpack://IsIpfs/webpack/bootstrap","webpack://IsIpfs/./node_modules/buffer/index.js","webpack://IsIpfs/./node_modules/multihashes/src/index.js","webpack://IsIpfs/./node_modules/varint/index.js","webpack://IsIpfs/./node_modules/multicodec/src/base-table.js","webpack://IsIpfs/./node_modules/bs58/index.js","webpack://IsIpfs/./node_modules/base-x/index.js","webpack://IsIpfs/./node_modules/multibase/src/index.js","webpack://IsIpfs/./node_modules/multicodec/src/varint-table.js","webpack://IsIpfs/./node_modules/multicodec/src/util.js","webpack://IsIpfs/./src/index.js","webpack://IsIpfs/(webpack)/buildin/global.js","webpack://IsIpfs/./node_modules/base64-js/index.js","webpack://IsIpfs/./node_modules/ieee754/index.js","webpack://IsIpfs/./node_modules/isarray/index.js","webpack://IsIpfs/./node_modules/safe-buffer/index.js","webpack://IsIpfs/./node_modules/multihashes/src/constants.js","webpack://IsIpfs/./node_modules/varint/encode.js","webpack://IsIpfs/./node_modules/varint/decode.js","webpack://IsIpfs/./node_modules/varint/length.js","webpack://IsIpfs/./node_modules/multibase/src/constants.js","webpack://IsIpfs/./node_modules/multibase/src/base.js","webpack://IsIpfs/./node_modules/multibase/src/base16.js","webpack://IsIpfs/./node_modules/multibase/src/base32.js","webpack://IsIpfs/./node_modules/multibase/src/base64.js","webpack://IsIpfs/./node_modules/cids/src/index.js","webpack://IsIpfs/./node_modules/multicodec/src/index.js","webpack://IsIpfs/./node_modules/multicodec/src/name-table.js","webpack://IsIpfs/./node_modules/cids/src/cid-util.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","global","base64","ieee754","isArray","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","length","RangeError","Uint8Array","__proto__","arg","encodingOrOffset","this","Error","allocUnsafe","from","TypeError","ArrayBuffer","array","byteOffset","byteLength","undefined","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","slice","fromString","obj","isBuffer","len","checked","copy","buffer","val","isnan","type","data","fromObject","assertSize","size","toString","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","b","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","buf","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","push","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","start","end","fromByteArray","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","e","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","arguments","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","inspect","max","match","join","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","Array","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","bs58","cs","names","codes","defaultLengths","varint","validate","multihash","decode","toHexString","hash","fromHexString","toB58String","encode","fromB58String","encoded","isValidCode","digest","hashfn","coerceCode","isAppCode","prefix","encodingLength","basex","ALPHABET","ALPHABET_MAP","BASE","LEADER","charAt","z","decodeUnsafe","carry","k","reverse","source","digits","q","constants","multibase","nameOrCode","base","getBase","bufOrString","substring","isEncoded","err","errNotSupported","codeBuf","validEncode","isImplemented","baseTable","varintBufferEncode","varintTable","encodingName","bufferToNumber","numberToBuffer","num","hexString","input","varintBufferDecode","base58","CID","urlPattern","pathPattern","defaultProtocolMatch","defaultHashMath","fqdnPattern","isCID","isIpfs","pattern","protocolMatch","hashMatch","formatted","convertToString","isIpns","ipfsSubdomain","url","ipnsSubdomain","cid","base32cid","isMultibase","subdomain","subdomainPattern","ipfsUrl","ipnsUrl","ipfsPath","path","ipnsPath","urlOrPath","g","Function","eval","window","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","tripletToBase64","output","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","log","LN2","copyProps","SafeBuffer","freeze","sha1","sha2-256","sha2-512","dbl-sha2-256","sha3-224","sha3-256","sha3-384","sha3-512","shake-128","shake-256","keccak-224","keccak-256","keccak-384","keccak-512","murmur3-128","murmur3-32","blake2b-8","blake2b-16","blake2b-24","blake2b-32","blake2b-40","blake2b-48","blake2b-56","blake2b-64","blake2b-72","blake2b-80","blake2b-88","blake2b-96","blake2b-104","blake2b-112","blake2b-120","blake2b-128","blake2b-136","blake2b-144","blake2b-152","blake2b-160","blake2b-168","blake2b-176","blake2b-184","blake2b-192","blake2b-200","blake2b-208","blake2b-216","blake2b-224","blake2b-232","blake2b-240","blake2b-248","blake2b-256","blake2b-264","blake2b-272","blake2b-280","blake2b-288","blake2b-296","blake2b-304","blake2b-312","blake2b-320","blake2b-328","blake2b-336","blake2b-344","blake2b-352","blake2b-360","blake2b-368","blake2b-376","blake2b-384","blake2b-392","blake2b-400","blake2b-408","blake2b-416","blake2b-424","blake2b-432","blake2b-440","blake2b-448","blake2b-456","blake2b-464","blake2b-472","blake2b-480","blake2b-488","blake2b-496","blake2b-504","blake2b-512","blake2s-8","blake2s-16","blake2s-24","blake2s-32","blake2s-40","blake2s-48","blake2s-56","blake2s-64","blake2s-72","blake2s-80","blake2s-88","blake2s-96","blake2s-104","blake2s-112","blake2s-120","blake2s-128","blake2s-136","blake2s-144","blake2s-152","blake2s-160","blake2s-168","blake2s-176","blake2s-184","blake2s-192","blake2s-200","blake2s-208","blake2s-216","blake2s-224","blake2s-232","blake2s-240","blake2s-248","blake2s-256","Skein256-8","Skein256-16","Skein256-24","Skein256-32","Skein256-40","Skein256-48","Skein256-56","Skein256-64","Skein256-72","Skein256-80","Skein256-88","Skein256-96","Skein256-104","Skein256-112","Skein256-120","Skein256-128","Skein256-136","Skein256-144","Skein256-152","Skein256-160","Skein256-168","Skein256-176","Skein256-184","Skein256-192","Skein256-200","Skein256-208","Skein256-216","Skein256-224","Skein256-232","Skein256-240","Skein256-248","Skein256-256","Skein512-8","Skein512-16","Skein512-24","Skein512-32","Skein512-40","Skein512-48","Skein512-56","Skein512-64","Skein512-72","Skein512-80","Skein512-88","Skein512-96","Skein512-104","Skein512-112","Skein512-120","Skein512-128","Skein512-136","Skein512-144","Skein512-152","Skein512-160","Skein512-168","Skein512-176","Skein512-184","Skein512-192","Skein512-200","Skein512-208","Skein512-216","Skein512-224","Skein512-232","Skein512-240","Skein512-248","Skein512-256","Skein512-264","Skein512-272","Skein512-280","Skein512-288","Skein512-296","Skein512-304","Skein512-312","Skein512-320","Skein512-328","Skein512-336","Skein512-344","Skein512-352","Skein512-360","Skein512-368","Skein512-376","Skein512-384","Skein512-392","Skein512-400","Skein512-408","Skein512-416","Skein512-424","Skein512-432","Skein512-440","Skein512-448","Skein512-456","Skein512-464","Skein512-472","Skein512-480","Skein512-488","Skein512-496","Skein512-504","Skein512-512","Skein1024-8","Skein1024-16","Skein1024-24","Skein1024-32","Skein1024-40","Skein1024-48","Skein1024-56","Skein1024-64","Skein1024-72","Skein1024-80","Skein1024-88","Skein1024-96","Skein1024-104","Skein1024-112","Skein1024-120","Skein1024-128","Skein1024-136","Skein1024-144","Skein1024-152","Skein1024-160","Skein1024-168","Skein1024-176","Skein1024-184","Skein1024-192","Skein1024-200","Skein1024-208","Skein1024-216","Skein1024-224","Skein1024-232","Skein1024-240","Skein1024-248","Skein1024-256","Skein1024-264","Skein1024-272","Skein1024-280","Skein1024-288","Skein1024-296","Skein1024-304","Skein1024-312","Skein1024-320","Skein1024-328","Skein1024-336","Skein1024-344","Skein1024-352","Skein1024-360","Skein1024-368","Skein1024-376","Skein1024-384","Skein1024-392","Skein1024-400","Skein1024-408","Skein1024-416","Skein1024-424","Skein1024-432","Skein1024-440","Skein1024-448","Skein1024-456","Skein1024-464","Skein1024-472","Skein1024-480","Skein1024-488","Skein1024-496","Skein1024-504","Skein1024-512","Skein1024-520","Skein1024-528","Skein1024-536","Skein1024-544","Skein1024-552","Skein1024-560","Skein1024-568","Skein1024-576","Skein1024-584","Skein1024-592","Skein1024-600","Skein1024-608","Skein1024-616","Skein1024-624","Skein1024-632","Skein1024-640","Skein1024-648","Skein1024-656","Skein1024-664","Skein1024-672","Skein1024-680","Skein1024-688","Skein1024-696","Skein1024-704","Skein1024-712","Skein1024-720","Skein1024-728","Skein1024-736","Skein1024-744","Skein1024-752","Skein1024-760","Skein1024-768","Skein1024-776","Skein1024-784","Skein1024-792","Skein1024-800","Skein1024-808","Skein1024-816","Skein1024-824","Skein1024-832","Skein1024-840","Skein1024-848","Skein1024-856","Skein1024-864","Skein1024-872","Skein1024-880","Skein1024-888","Skein1024-896","Skein1024-904","Skein1024-912","Skein1024-920","Skein1024-928","Skein1024-936","Skein1024-944","Skein1024-952","Skein1024-960","Skein1024-968","Skein1024-976","Skein1024-984","Skein1024-992","Skein1024-1000","Skein1024-1008","Skein1024-1016","Skein1024-1024","17","18","19","86","23","22","21","20","24","25","26","27","28","29","34","35","45569","45570","45571","45572","45573","45574","45575","45576","45577","45578","45579","45580","45581","45582","45583","45584","45585","45586","45587","45588","45589","45590","45591","45592","45593","45594","45595","45596","45597","45598","45599","45600","45601","45602","45603","45604","45605","45606","45607","45608","45609","45610","45611","45612","45613","45614","45615","45616","45617","45618","45619","45620","45621","45622","45623","45624","45625","45626","45627","45628","45629","45630","45631","45632","45633","45634","45635","45636","45637","45638","45639","45640","45641","45642","45643","45644","45645","45646","45647","45648","45649","45650","45651","45652","45653","45654","45655","45656","45657","45658","45659","45660","45661","45662","45663","45664","45825","45826","45827","45828","45829","45830","45831","45832","45833","45834","45835","45836","45837","45838","45839","45840","45841","45842","45843","45844","45845","45846","45847","45848","45849","45850","45851","45852","45853","45854","45855","45856","45857","45858","45859","45860","45861","45862","45863","45864","45865","45866","45867","45868","45869","45870","45871","45872","45873","45874","45875","45876","45877","45878","45879","45880","45881","45882","45883","45884","45885","45886","45887","45888","45889","45890","45891","45892","45893","45894","45895","45896","45897","45898","45899","45900","45901","45902","45903","45904","45905","45906","45907","45908","45909","45910","45911","45912","45913","45914","45915","45916","45917","45918","45919","45920","45921","45922","45923","45924","45925","45926","45927","45928","45929","45930","45931","45932","45933","45934","45935","45936","45937","45938","45939","45940","45941","45942","45943","45944","45945","45946","45947","45948","45949","45950","45951","45952","45953","45954","45955","45956","45957","45958","45959","45960","45961","45962","45963","45964","45965","45966","45967","45968","45969","45970","45971","45972","45973","45974","45975","45976","45977","45978","45979","45980","45981","45982","45983","45984","45985","45986","45987","45988","45989","45990","45991","45992","45993","45994","45995","45996","45997","45998","45999","46000","46001","46002","46003","46004","46005","46006","46007","46008","46009","46010","46011","46012","46013","46014","46015","46016","46017","46018","46019","46020","46021","46022","46023","46024","46025","46026","46027","46028","46029","46030","46031","46032","46033","46034","46035","46036","46037","46038","46039","46040","46041","46042","46043","46044","46045","46046","46047","46048","oldOffset","INT","MSB","MSBALL","shift","counter","REST","N1","N2","N3","N4","N5","N6","N7","N8","N9","Base","baseX","base16","base32","reduce","prev","tupple","[object Object]","implementation","alphabet","engine","stringOrBuffer","char","view","padding","bits","RegExp","index","pad","mh","multicodec","codecs","codecVarints","CIDUtil","version","codec","getCodec","rmPrefix","v","validateCID","other","checkCIDComponents","errorMsg","codecNameToCodeVarint","codeToCodecName","util","addPrefix","multicodecStrOrCode","prefixedData","codecName","getCodeVarint","addCodec","nameTable","message"],"mappings":"uBACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,mCClFA,SAAAC;;;;;;;AAUA,IAAAC,EAAArC,EAAA,IACAsC,EAAAtC,EAAA,IACAuC,EAAAvC,EAAA,IAmDA,SAAAwC,IACA,OAAAC,EAAAC,oBACA,WACA,WAGA,SAAAC,EAAAC,EAAAC,GACA,GAAAL,IAAAK,EACA,UAAAC,WAAA,8BAcA,OAZAL,EAAAC,qBAEAE,EAAA,IAAAG,WAAAF,IACAG,UAAAP,EAAAT,WAGA,OAAAY,IACAA,EAAA,IAAAH,EAAAI,IAEAD,EAAAC,UAGAD,EAaA,SAAAH,EAAAQ,EAAAC,EAAAL,GACA,KAAAJ,EAAAC,qBAAAS,gBAAAV,GACA,WAAAA,EAAAQ,EAAAC,EAAAL,GAIA,oBAAAI,EAAA,CACA,oBAAAC,EACA,UAAAE,MACA,qEAGA,OAAAC,EAAAF,KAAAF,GAEA,OAAAK,EAAAH,KAAAF,EAAAC,EAAAL,GAWA,SAAAS,EAAAV,EAAAvB,EAAA6B,EAAAL,GACA,oBAAAxB,EACA,UAAAkC,UAAA,yCAGA,0BAAAC,aAAAnC,aAAAmC,YA6HA,SAAAZ,EAAAa,EAAAC,EAAAb,GAGA,GAFAY,EAAAE,WAEAD,EAAA,GAAAD,EAAAE,WAAAD,EACA,UAAAZ,WAAA,6BAGA,GAAAW,EAAAE,WAAAD,GAAAb,GAAA,GACA,UAAAC,WAAA,6BAIAW,OADAG,IAAAF,QAAAE,IAAAf,EACA,IAAAE,WAAAU,QACGG,IAAAf,EACH,IAAAE,WAAAU,EAAAC,GAEA,IAAAX,WAAAU,EAAAC,EAAAb,GAGAJ,EAAAC,qBAEAE,EAAAa,GACAT,UAAAP,EAAAT,UAGAY,EAAAiB,EAAAjB,EAAAa,GAEA,OAAAb,EAvJAkB,CAAAlB,EAAAvB,EAAA6B,EAAAL,GAGA,iBAAAxB,EAwFA,SAAAuB,EAAAmB,EAAAC,GACA,iBAAAA,GAAA,KAAAA,IACAA,EAAA,QAGA,IAAAvB,EAAAwB,WAAAD,GACA,UAAAT,UAAA,8CAGA,IAAAV,EAAA,EAAAc,EAAAI,EAAAC,GAGAE,GAFAtB,EAAAD,EAAAC,EAAAC,IAEAsB,MAAAJ,EAAAC,GAEAE,IAAArB,IAIAD,IAAAwB,MAAA,EAAAF,IAGA,OAAAtB,EA5GAyB,CAAAzB,EAAAvB,EAAA6B,GAsJA,SAAAN,EAAA0B,GACA,GAAA7B,EAAA8B,SAAAD,GAAA,CACA,IAAAE,EAAA,EAAAC,EAAAH,EAAAzB,QAGA,YAFAD,EAAAD,EAAAC,EAAA4B,IAEA3B,OACAD,GAGA0B,EAAAI,KAAA9B,EAAA,IAAA4B,GACA5B,GAGA,GAAA0B,EAAA,CACA,uBAAAd,aACAc,EAAAK,kBAAAnB,aAAA,WAAAc,EACA,uBAAAA,EAAAzB,QA+8CA,SAAA+B,GACA,OAAAA,KAh9CAC,CAAAP,EAAAzB,QACAF,EAAAC,EAAA,GAEAiB,EAAAjB,EAAA0B,GAGA,cAAAA,EAAAQ,MAAAvC,EAAA+B,EAAAS,MACA,OAAAlB,EAAAjB,EAAA0B,EAAAS,MAIA,UAAAxB,UAAA,sFA9KAyB,CAAApC,EAAAvB,GA4BA,SAAA4D,EAAAC,GACA,oBAAAA,EACA,UAAA3B,UAAA,oCACG,GAAA2B,EAAA,EACH,UAAApC,WAAA,wCA4BA,SAAAO,EAAAT,EAAAsC,GAGA,GAFAD,EAAAC,GACAtC,EAAAD,EAAAC,EAAAsC,EAAA,MAAAT,EAAAS,KACAzC,EAAAC,oBACA,QAAAtC,EAAA,EAAmBA,EAAA8E,IAAU9E,EAC7BwC,EAAAxC,GAAA,EAGA,OAAAwC,EAwCA,SAAAiB,EAAAjB,EAAAa,GACA,IAAAZ,EAAAY,EAAAZ,OAAA,MAAA4B,EAAAhB,EAAAZ,QACAD,EAAAD,EAAAC,EAAAC,GACA,QAAAzC,EAAA,EAAiBA,EAAAyC,EAAYzC,GAAA,EAC7BwC,EAAAxC,GAAA,IAAAqD,EAAArD,GAEA,OAAAwC,EA+DA,SAAA6B,EAAA5B,GAGA,GAAAA,GAAAL,IACA,UAAAM,WAAA,0DACAN,IAAA2C,SAAA,cAEA,SAAAtC,EAsFA,SAAAc,EAAAI,EAAAC,GACA,GAAAvB,EAAA8B,SAAAR,GACA,OAAAA,EAAAlB,OAEA,uBAAAW,aAAA,mBAAAA,YAAA4B,SACA5B,YAAA4B,OAAArB,iBAAAP,aACA,OAAAO,EAAAJ,WAEA,iBAAAI,IACAA,EAAA,GAAAA,GAGA,IAAAS,EAAAT,EAAAlB,OACA,OAAA2B,EAAA,SAIA,IADA,IAAAa,GAAA,IAEA,OAAArB,GACA,YACA,aACA,aACA,OAAAQ,EACA,WACA,YACA,UAAAZ,EACA,OAAA0B,EAAAvB,GAAAlB,OACA,WACA,YACA,cACA,eACA,SAAA2B,EACA,UACA,OAAAA,IAAA,EACA,aACA,OAAAe,EAAAxB,GAAAlB,OACA,QACA,GAAAwC,EAAA,OAAAC,EAAAvB,GAAAlB,OACAmB,GAAA,GAAAA,GAAAwB,cACAH,GAAA,GAgFA,SAAAI,EAAAC,EAAA7D,EAAArB,GACA,IAAAJ,EAAAsF,EAAA7D,GACA6D,EAAA7D,GAAA6D,EAAAlF,GACAkF,EAAAlF,GAAAJ,EAmIA,SAAAuF,EAAAhB,EAAAC,EAAAlB,EAAAM,EAAA4B,GAEA,OAAAjB,EAAA9B,OAAA,SAmBA,GAhBA,iBAAAa,GACAM,EAAAN,EACAA,EAAA,GACGA,EAAA,WACHA,EAAA,WACGA,GAAA,aACHA,GAAA,YAEAA,KACAmC,MAAAnC,KAEAA,EAAAkC,EAAA,EAAAjB,EAAA9B,OAAA,GAIAa,EAAA,IAAAA,EAAAiB,EAAA9B,OAAAa,GACAA,GAAAiB,EAAA9B,OAAA,CACA,GAAA+C,EAAA,SACAlC,EAAAiB,EAAA9B,OAAA,OACG,GAAAa,EAAA,GACH,IAAAkC,EACA,SADAlC,EAAA,EAUA,GALA,iBAAAkB,IACAA,EAAAnC,EAAAa,KAAAsB,EAAAZ,IAIAvB,EAAA8B,SAAAK,GAEA,WAAAA,EAAA/B,QACA,EAEAiD,EAAAnB,EAAAC,EAAAlB,EAAAM,EAAA4B,GACG,oBAAAhB,EAEH,OADAA,GAAA,IACAnC,EAAAC,qBACA,mBAAAK,WAAAf,UAAA+D,QACAH,EACA7C,WAAAf,UAAA+D,QAAAxF,KAAAoE,EAAAC,EAAAlB,GAEAX,WAAAf,UAAAgE,YAAAzF,KAAAoE,EAAAC,EAAAlB,GAGAoC,EAAAnB,GAAAC,GAAAlB,EAAAM,EAAA4B,GAGA,UAAArC,UAAA,wCAGA,SAAAuC,EAAAG,EAAArB,EAAAlB,EAAAM,EAAA4B,GACA,IA0BAxF,EA1BA8F,EAAA,EACAC,EAAAF,EAAApD,OACAuD,EAAAxB,EAAA/B,OAEA,QAAAe,IAAAI,IAEA,UADAA,EAAAqC,OAAArC,GAAAwB,gBACA,UAAAxB,GACA,YAAAA,GAAA,aAAAA,GAAA,CACA,GAAAiC,EAAApD,OAAA,GAAA+B,EAAA/B,OAAA,EACA,SAEAqD,EAAA,EACAC,GAAA,EACAC,GAAA,EACA1C,GAAA,EAIA,SAAA4C,EAAAC,EAAAnG,GACA,WAAA8F,EACAK,EAAAnG,GAEAmG,EAAAC,aAAApG,EAAA8F,GAKA,GAAAN,EAAA,CACA,IAAAa,GAAA,EACA,IAAArG,EAAAsD,EAAwBtD,EAAA+F,EAAe/F,IACvC,GAAAkG,EAAAL,EAAA7F,KAAAkG,EAAA1B,GAAA,IAAA6B,EAAA,EAAArG,EAAAqG,IAEA,IADA,IAAAA,MAAArG,GACAA,EAAAqG,EAAA,IAAAL,EAAA,OAAAK,EAAAP,OAEA,IAAAO,IAAArG,KAAAqG,GACAA,GAAA,OAKA,IADA/C,EAAA0C,EAAAD,IAAAzC,EAAAyC,EAAAC,GACAhG,EAAAsD,EAAwBtD,GAAA,EAAQA,IAAA,CAEhC,IADA,IAAAsG,GAAA,EACAC,EAAA,EAAqBA,EAAAP,EAAeO,IACpC,GAAAL,EAAAL,EAAA7F,EAAAuG,KAAAL,EAAA1B,EAAA+B,GAAA,CACAD,GAAA,EACA,MAGA,GAAAA,EAAA,OAAAtG,EAIA,SAeA,SAAAwG,EAAAL,EAAAxC,EAAA8C,EAAAhE,GACAgE,EAAAC,OAAAD,IAAA,EACA,IAAAE,EAAAR,EAAA1D,OAAAgE,EACAhE,GAGAA,EAAAiE,OAAAjE,IACAkE,IACAlE,EAAAkE,GAJAlE,EAAAkE,EASA,IAAAC,EAAAjD,EAAAlB,OACA,GAAAmE,EAAA,eAAAzD,UAAA,sBAEAV,EAAAmE,EAAA,IACAnE,EAAAmE,EAAA,GAEA,QAAA5G,EAAA,EAAiBA,EAAAyC,IAAYzC,EAAA,CAC7B,IAAA6G,EAAAC,SAAAnD,EAAAoD,OAAA,EAAA/G,EAAA,OACA,GAAAyF,MAAAoB,GAAA,OAAA7G,EACAmG,EAAAM,EAAAzG,GAAA6G,EAEA,OAAA7G,EAGA,SAAAgH,EAAAb,EAAAxC,EAAA8C,EAAAhE,GACA,OAAAwE,EAAA/B,EAAAvB,EAAAwC,EAAA1D,OAAAgE,GAAAN,EAAAM,EAAAhE,GAGA,SAAAyE,EAAAf,EAAAxC,EAAA8C,EAAAhE,GACA,OAAAwE,EAq6BA,SAAAE,GAEA,IADA,IAAAC,KACApH,EAAA,EAAiBA,EAAAmH,EAAA1E,SAAgBzC,EAEjCoH,EAAAC,KAAA,IAAAF,EAAAG,WAAAtH,IAEA,OAAAoH,EA36BAG,CAAA5D,GAAAwC,EAAAM,EAAAhE,GAGA,SAAA+E,EAAArB,EAAAxC,EAAA8C,EAAAhE,GACA,OAAAyE,EAAAf,EAAAxC,EAAA8C,EAAAhE,GAGA,SAAAgF,EAAAtB,EAAAxC,EAAA8C,EAAAhE,GACA,OAAAwE,EAAA9B,EAAAxB,GAAAwC,EAAAM,EAAAhE,GAGA,SAAAiF,EAAAvB,EAAAxC,EAAA8C,EAAAhE,GACA,OAAAwE,EAk6BA,SAAAE,EAAAQ,GAGA,IAFA,IAAAtH,EAAAuH,EAAAC,EACAT,KACApH,EAAA,EAAiBA,EAAAmH,EAAA1E,WACjBkF,GAAA,QADiC3H,EAGjCK,EAAA8G,EAAAG,WAAAtH,GACA4H,EAAAvH,GAAA,EACAwH,EAAAxH,EAAA,IACA+G,EAAAC,KAAAQ,GACAT,EAAAC,KAAAO,GAGA,OAAAR,EA/6BAU,CAAAnE,EAAAwC,EAAA1D,OAAAgE,GAAAN,EAAAM,EAAAhE,GAkFA,SAAAsF,EAAA5B,EAAA6B,EAAAC,GACA,WAAAD,GAAAC,IAAA9B,EAAA1D,OACAR,EAAAiG,cAAA/B,GAEAlE,EAAAiG,cAAA/B,EAAAnC,MAAAgE,EAAAC,IAIA,SAAAE,EAAAhC,EAAA6B,EAAAC,GACAA,EAAAG,KAAAC,IAAAlC,EAAA1D,OAAAwF,GAIA,IAHA,IAAAK,KAEAtI,EAAAgI,EACAhI,EAAAiI,GAAA,CACA,IAQAM,EAAAC,EAAAC,EAAAC,EARAC,EAAAxC,EAAAnG,GACA4I,EAAA,KACAC,EAAAF,EAAA,MACAA,EAAA,MACAA,EAAA,MACA,EAEA,GAAA3I,EAAA6I,GAAAZ,EAGA,OAAAY,GACA,OACAF,EAAA,MACAC,EAAAD,GAEA,MACA,OAEA,WADAJ,EAAApC,EAAAnG,EAAA,OAEA0I,GAAA,GAAAC,IAAA,KAAAJ,GACA,MACAK,EAAAF,GAGA,MACA,OACAH,EAAApC,EAAAnG,EAAA,GACAwI,EAAArC,EAAAnG,EAAA,GACA,UAAAuI,IAAA,UAAAC,KACAE,GAAA,GAAAC,IAAA,OAAAJ,IAAA,KAAAC,GACA,OAAAE,EAAA,OAAAA,EAAA,SACAE,EAAAF,GAGA,MACA,OACAH,EAAApC,EAAAnG,EAAA,GACAwI,EAAArC,EAAAnG,EAAA,GACAyI,EAAAtC,EAAAnG,EAAA,GACA,UAAAuI,IAAA,UAAAC,IAAA,UAAAC,KACAC,GAAA,GAAAC,IAAA,OAAAJ,IAAA,OAAAC,IAAA,KAAAC,GACA,OAAAC,EAAA,UACAE,EAAAF,GAMA,OAAAE,GAGAA,EAAA,MACAC,EAAA,GACKD,EAAA,QAELA,GAAA,MACAN,EAAAjB,KAAAuB,IAAA,eACAA,EAAA,WAAAA,GAGAN,EAAAjB,KAAAuB,GACA5I,GAAA6I,EAGA,OAQA,SAAAC,GACA,IAAA1E,EAAA0E,EAAArG,OACA,GAAA2B,GAAA2E,EACA,OAAA9C,OAAA+C,aAAAC,MAAAhD,OAAA6C,GAIA,IAAAR,EAAA,GACAtI,EAAA,EACA,KAAAA,EAAAoE,GACAkE,GAAArC,OAAA+C,aAAAC,MACAhD,OACA6C,EAAA9E,MAAAhE,KAAA+I,IAGA,OAAAT,EAvBAY,CAAAZ,GA98BAxI,EAAAuC,SACAvC,EAAAqJ,WAoTA,SAAA1G,IACAA,OACAA,EAAA,GAEA,OAAAJ,EAAA+G,OAAA3G,IAvTA3C,EAAAuJ,kBAAA,GA0BAhH,EAAAC,yBAAAkB,IAAAxB,EAAAM,oBACAN,EAAAM,oBAQA,WACA,IACA,IAAAuD,EAAA,IAAAlD,WAAA,GAEA,OADAkD,EAAAjD,WAAqBA,UAAAD,WAAAf,UAAA0H,IAAA,WAAmD,YACxE,KAAAzD,EAAAyD,OACA,mBAAAzD,EAAA0D,UACA,IAAA1D,EAAA0D,SAAA,KAAAhG,WACG,MAAAiG,GACH,UAfAC,GAKA3J,EAAAsC,eAkEAC,EAAAqH,SAAA,KAGArH,EAAAsH,SAAA,SAAA9D,GAEA,OADAA,EAAAjD,UAAAP,EAAAT,UACAiE,GA2BAxD,EAAAa,KAAA,SAAAjC,EAAA6B,EAAAL,GACA,OAAAS,EAAA,KAAAjC,EAAA6B,EAAAL,IAGAJ,EAAAC,sBACAD,EAAAT,UAAAgB,UAAAD,WAAAf,UACAS,EAAAO,UAAAD,WACA,oBAAA5B,eAAA6I,SACAvH,EAAAtB,OAAA6I,WAAAvH,GAEA3B,OAAAC,eAAA0B,EAAAtB,OAAA6I,SACA3I,MAAA,KACA4I,cAAA,KAiCAxH,EAAA+G,MAAA,SAAAtE,EAAAgF,EAAAlG,GACA,OArBA,SAAApB,EAAAsC,EAAAgF,EAAAlG,GAEA,OADAiB,EAAAC,GACAA,GAAA,EACAvC,EAAAC,EAAAsC,QAEAtB,IAAAsG,EAIA,iBAAAlG,EACArB,EAAAC,EAAAsC,GAAAgF,OAAAlG,GACArB,EAAAC,EAAAsC,GAAAgF,QAEAvH,EAAAC,EAAAsC,GAQAsE,CAAA,KAAAtE,EAAAgF,EAAAlG,IAiBAvB,EAAAY,YAAA,SAAA6B,GACA,OAAA7B,EAAA,KAAA6B,IAKAzC,EAAA0H,gBAAA,SAAAjF,GACA,OAAA7B,EAAA,KAAA6B,IAiHAzC,EAAA8B,SAAA,SAAAmB,GACA,cAAAA,MAAA0E,YAGA3H,EAAA4H,QAAA,SAAAC,EAAA5E,GACA,IAAAjD,EAAA8B,SAAA+F,KAAA7H,EAAA8B,SAAAmB,GACA,UAAAnC,UAAA,6BAGA,GAAA+G,IAAA5E,EAAA,SAKA,IAHA,IAAA6E,EAAAD,EAAAzH,OACA2H,EAAA9E,EAAA7C,OAEAzC,EAAA,EAAAoE,EAAAgE,KAAAC,IAAA8B,EAAAC,GAAuCpK,EAAAoE,IAASpE,EAChD,GAAAkK,EAAAlK,KAAAsF,EAAAtF,GAAA,CACAmK,EAAAD,EAAAlK,GACAoK,EAAA9E,EAAAtF,GACA,MAIA,OAAAmK,EAAAC,GAAA,EACAA,EAAAD,EAAA,EACA,GAGA9H,EAAAwB,WAAA,SAAAD,GACA,OAAAqC,OAAArC,GAAAwB,eACA,UACA,WACA,YACA,YACA,aACA,aACA,aACA,WACA,YACA,cACA,eACA,SACA,QACA,WAIA/C,EAAAgI,OAAA,SAAAC,EAAA7H,GACA,IAAAN,EAAAmI,GACA,UAAAnH,UAAA,+CAGA,OAAAmH,EAAA7H,OACA,OAAAJ,EAAA+G,MAAA,GAGA,IAAApJ,EACA,QAAAwD,IAAAf,EAEA,IADAA,EAAA,EACAzC,EAAA,EAAeA,EAAAsK,EAAA7H,SAAiBzC,EAChCyC,GAAA6H,EAAAtK,GAAAyC,OAIA,IAAA8B,EAAAlC,EAAAY,YAAAR,GACA8H,EAAA,EACA,IAAAvK,EAAA,EAAaA,EAAAsK,EAAA7H,SAAiBzC,EAAA,CAC9B,IAAAmG,EAAAmE,EAAAtK,GACA,IAAAqC,EAAA8B,SAAAgC,GACA,UAAAhD,UAAA,+CAEAgD,EAAA7B,KAAAC,EAAAgG,GACAA,GAAApE,EAAA1D,OAEA,OAAA8B,GA8CAlC,EAAAkB,aA0EAlB,EAAAT,UAAAoI,WAAA,EAQA3H,EAAAT,UAAA4I,OAAA,WACA,IAAApG,EAAArB,KAAAN,OACA,GAAA2B,EAAA,KACA,UAAA1B,WAAA,6CAEA,QAAA1C,EAAA,EAAiBA,EAAAoE,EAASpE,GAAA,EAC1BqF,EAAAtC,KAAA/C,IAAA,GAEA,OAAA+C,MAGAV,EAAAT,UAAA6I,OAAA,WACA,IAAArG,EAAArB,KAAAN,OACA,GAAA2B,EAAA,KACA,UAAA1B,WAAA,6CAEA,QAAA1C,EAAA,EAAiBA,EAAAoE,EAASpE,GAAA,EAC1BqF,EAAAtC,KAAA/C,IAAA,GACAqF,EAAAtC,KAAA/C,EAAA,EAAAA,EAAA,GAEA,OAAA+C,MAGAV,EAAAT,UAAA8I,OAAA,WACA,IAAAtG,EAAArB,KAAAN,OACA,GAAA2B,EAAA,KACA,UAAA1B,WAAA,6CAEA,QAAA1C,EAAA,EAAiBA,EAAAoE,EAASpE,GAAA,EAC1BqF,EAAAtC,KAAA/C,IAAA,GACAqF,EAAAtC,KAAA/C,EAAA,EAAAA,EAAA,GACAqF,EAAAtC,KAAA/C,EAAA,EAAAA,EAAA,GACAqF,EAAAtC,KAAA/C,EAAA,EAAAA,EAAA,GAEA,OAAA+C,MAGAV,EAAAT,UAAAmD,SAAA,WACA,IAAAtC,EAAA,EAAAM,KAAAN,OACA,WAAAA,EAAA,GACA,IAAAkI,UAAAlI,OAAA0F,EAAApF,KAAA,EAAAN,GAxHA,SAAAmB,EAAAoE,EAAAC,GACA,IAAAhD,GAAA,EAcA,SALAzB,IAAAwE,KAAA,KACAA,EAAA,GAIAA,EAAAjF,KAAAN,OACA,SAOA,SAJAe,IAAAyE,KAAAlF,KAAAN,UACAwF,EAAAlF,KAAAN,QAGAwF,GAAA,EACA,SAOA,IAHAA,KAAA,KACAD,KAAA,GAGA,SAKA,IAFApE,MAAA,UAGA,OAAAA,GACA,UACA,OAAAgH,EAAA7H,KAAAiF,EAAAC,GAEA,WACA,YACA,OAAAE,EAAApF,KAAAiF,EAAAC,GAEA,YACA,OAAA4C,EAAA9H,KAAAiF,EAAAC,GAEA,aACA,aACA,OAAA6C,EAAA/H,KAAAiF,EAAAC,GAEA,aACA,OAAAF,EAAAhF,KAAAiF,EAAAC,GAEA,WACA,YACA,cACA,eACA,OAAA8C,EAAAhI,KAAAiF,EAAAC,GAEA,QACA,GAAAhD,EAAA,UAAA9B,UAAA,qBAAAS,GACAA,KAAA,IAAAwB,cACAH,GAAA,IAwDAgE,MAAAlG,KAAA4H,YAGAtI,EAAAT,UAAAoJ,OAAA,SAAA1F,GACA,IAAAjD,EAAA8B,SAAAmB,GAAA,UAAAnC,UAAA,6BACA,OAAAJ,OAAAuC,GACA,IAAAjD,EAAA4H,QAAAlH,KAAAuC,IAGAjD,EAAAT,UAAAqJ,QAAA,WACA,IAAA9D,EAAA,GACA+D,EAAApL,EAAAuJ,kBAKA,OAJAtG,KAAAN,OAAA,IACA0E,EAAApE,KAAAgC,SAAA,QAAAmG,GAAAC,MAAA,SAAkDC,KAAA,KAClDrI,KAAAN,OAAAyI,IAAA/D,GAAA,UAEA,WAAAA,EAAA,KAGA9E,EAAAT,UAAAqI,QAAA,SAAAoB,EAAArD,EAAAC,EAAAqD,EAAAC,GACA,IAAAlJ,EAAA8B,SAAAkH,GACA,UAAAlI,UAAA,6BAgBA,QAbAK,IAAAwE,IACAA,EAAA,QAEAxE,IAAAyE,IACAA,EAAAoD,IAAA5I,OAAA,QAEAe,IAAA8H,IACAA,EAAA,QAEA9H,IAAA+H,IACAA,EAAAxI,KAAAN,QAGAuF,EAAA,GAAAC,EAAAoD,EAAA5I,QAAA6I,EAAA,GAAAC,EAAAxI,KAAAN,OACA,UAAAC,WAAA,sBAGA,GAAA4I,GAAAC,GAAAvD,GAAAC,EACA,SAEA,GAAAqD,GAAAC,EACA,SAEA,GAAAvD,GAAAC,EACA,SAQA,GALAD,KAAA,EACAC,KAAA,EACAqD,KAAA,EACAC,KAAA,EAEAxI,OAAAsI,EAAA,SASA,IAPA,IAAAlB,EAAAoB,EAAAD,EACAlB,EAAAnC,EAAAD,EACA5D,EAAAgE,KAAAC,IAAA8B,EAAAC,GAEAoB,EAAAzI,KAAAiB,MAAAsH,EAAAC,GACAE,EAAAJ,EAAArH,MAAAgE,EAAAC,GAEAjI,EAAA,EAAiBA,EAAAoE,IAASpE,EAC1B,GAAAwL,EAAAxL,KAAAyL,EAAAzL,GAAA,CACAmK,EAAAqB,EAAAxL,GACAoK,EAAAqB,EAAAzL,GACA,MAIA,OAAAmK,EAAAC,GAAA,EACAA,EAAAD,EAAA,EACA,GA6HA9H,EAAAT,UAAA8J,SAAA,SAAAlH,EAAAlB,EAAAM,GACA,WAAAb,KAAA4C,QAAAnB,EAAAlB,EAAAM,IAGAvB,EAAAT,UAAA+D,QAAA,SAAAnB,EAAAlB,EAAAM,GACA,OAAA2B,EAAAxC,KAAAyB,EAAAlB,EAAAM,GAAA,IAGAvB,EAAAT,UAAAgE,YAAA,SAAApB,EAAAlB,EAAAM,GACA,OAAA2B,EAAAxC,KAAAyB,EAAAlB,EAAAM,GAAA,IAkDAvB,EAAAT,UAAAmC,MAAA,SAAAJ,EAAA8C,EAAAhE,EAAAmB,GAEA,QAAAJ,IAAAiD,EACA7C,EAAA,OACAnB,EAAAM,KAAAN,OACAgE,EAAA,OAEG,QAAAjD,IAAAf,GAAA,iBAAAgE,EACH7C,EAAA6C,EACAhE,EAAAM,KAAAN,OACAgE,EAAA,MAEG,KAAAkF,SAAAlF,GAWH,UAAAzD,MACA,2EAXAyD,GAAA,EACAkF,SAAAlJ,IACAA,GAAA,OACAe,IAAAI,MAAA,UAEAA,EAAAnB,EACAA,OAAAe,GASA,IAAAmD,EAAA5D,KAAAN,OAAAgE,EAGA,SAFAjD,IAAAf,KAAAkE,KAAAlE,EAAAkE,GAEAhD,EAAAlB,OAAA,IAAAA,EAAA,GAAAgE,EAAA,IAAAA,EAAA1D,KAAAN,OACA,UAAAC,WAAA,0CAGAkB,MAAA,QAGA,IADA,IAAAqB,GAAA,IAEA,OAAArB,GACA,UACA,OAAA4C,EAAAzD,KAAAY,EAAA8C,EAAAhE,GAEA,WACA,YACA,OAAAuE,EAAAjE,KAAAY,EAAA8C,EAAAhE,GAEA,YACA,OAAAyE,EAAAnE,KAAAY,EAAA8C,EAAAhE,GAEA,aACA,aACA,OAAA+E,EAAAzE,KAAAY,EAAA8C,EAAAhE,GAEA,aAEA,OAAAgF,EAAA1E,KAAAY,EAAA8C,EAAAhE,GAEA,WACA,YACA,cACA,eACA,OAAAiF,EAAA3E,KAAAY,EAAA8C,EAAAhE,GAEA,QACA,GAAAwC,EAAA,UAAA9B,UAAA,qBAAAS,GACAA,GAAA,GAAAA,GAAAwB,cACAH,GAAA,IAKA5C,EAAAT,UAAAgK,OAAA,WACA,OACAlH,KAAA,SACAC,KAAAkH,MAAAjK,UAAAoC,MAAA7D,KAAA4C,KAAA+I,MAAA/I,KAAA,KAwFA,IAAAgG,EAAA,KAoBA,SAAA8B,EAAA1E,EAAA6B,EAAAC,GACA,IAAA8D,EAAA,GACA9D,EAAAG,KAAAC,IAAAlC,EAAA1D,OAAAwF,GAEA,QAAAjI,EAAAgI,EAAqBhI,EAAAiI,IAASjI,EAC9B+L,GAAA9F,OAAA+C,aAAA,IAAA7C,EAAAnG,IAEA,OAAA+L,EAGA,SAAAjB,EAAA3E,EAAA6B,EAAAC,GACA,IAAA8D,EAAA,GACA9D,EAAAG,KAAAC,IAAAlC,EAAA1D,OAAAwF,GAEA,QAAAjI,EAAAgI,EAAqBhI,EAAAiI,IAASjI,EAC9B+L,GAAA9F,OAAA+C,aAAA7C,EAAAnG,IAEA,OAAA+L,EAGA,SAAAnB,EAAAzE,EAAA6B,EAAAC,GACA,IAAA7D,EAAA+B,EAAA1D,SAEAuF,KAAA,KAAAA,EAAA,KACAC,KAAA,GAAAA,EAAA7D,KAAA6D,EAAA7D,GAGA,IADA,IAAA4H,EAAA,GACAhM,EAAAgI,EAAqBhI,EAAAiI,IAASjI,EAC9BgM,GAAAC,EAAA9F,EAAAnG,IAEA,OAAAgM,EAGA,SAAAjB,EAAA5E,EAAA6B,EAAAC,GAGA,IAFA,IAAAiE,EAAA/F,EAAAnC,MAAAgE,EAAAC,GACAK,EAAA,GACAtI,EAAA,EAAiBA,EAAAkM,EAAAzJ,OAAkBzC,GAAA,EACnCsI,GAAArC,OAAA+C,aAAAkD,EAAAlM,GAAA,IAAAkM,EAAAlM,EAAA,IAEA,OAAAsI,EA0CA,SAAA6D,EAAA1F,EAAA2F,EAAA3J,GACA,GAAAgE,EAAA,MAAAA,EAAA,YAAA/D,WAAA,sBACA,GAAA+D,EAAA2F,EAAA3J,EAAA,UAAAC,WAAA,yCA+JA,SAAA2J,EAAAlG,EAAAlF,EAAAwF,EAAA2F,EAAAlB,EAAA7C,GACA,IAAAhG,EAAA8B,SAAAgC,GAAA,UAAAhD,UAAA,+CACA,GAAAlC,EAAAiK,GAAAjK,EAAAoH,EAAA,UAAA3F,WAAA,qCACA,GAAA+D,EAAA2F,EAAAjG,EAAA1D,OAAA,UAAAC,WAAA,sBAkDA,SAAA4J,EAAAnG,EAAAlF,EAAAwF,EAAA8F,GACAtL,EAAA,IAAAA,EAAA,MAAAA,EAAA,GACA,QAAAjB,EAAA,EAAAuG,EAAA6B,KAAAC,IAAAlC,EAAA1D,OAAAgE,EAAA,GAAuDzG,EAAAuG,IAAOvG,EAC9DmG,EAAAM,EAAAzG,IAAAiB,EAAA,QAAAsL,EAAAvM,EAAA,EAAAA,MACA,GAAAuM,EAAAvM,EAAA,EAAAA,GA8BA,SAAAwM,EAAArG,EAAAlF,EAAAwF,EAAA8F,GACAtL,EAAA,IAAAA,EAAA,WAAAA,EAAA,GACA,QAAAjB,EAAA,EAAAuG,EAAA6B,KAAAC,IAAAlC,EAAA1D,OAAAgE,EAAA,GAAuDzG,EAAAuG,IAAOvG,EAC9DmG,EAAAM,EAAAzG,GAAAiB,IAAA,GAAAsL,EAAAvM,EAAA,EAAAA,GAAA,IAmJA,SAAAyM,EAAAtG,EAAAlF,EAAAwF,EAAA2F,EAAAlB,EAAA7C,GACA,GAAA5B,EAAA2F,EAAAjG,EAAA1D,OAAA,UAAAC,WAAA,sBACA,GAAA+D,EAAA,YAAA/D,WAAA,sBAGA,SAAAgK,EAAAvG,EAAAlF,EAAAwF,EAAA8F,EAAAI,GAKA,OAJAA,GACAF,EAAAtG,EAAAlF,EAAAwF,EAAA,GAEAvE,EAAA6B,MAAAoC,EAAAlF,EAAAwF,EAAA8F,EAAA,MACA9F,EAAA,EAWA,SAAAmG,EAAAzG,EAAAlF,EAAAwF,EAAA8F,EAAAI,GAKA,OAJAA,GACAF,EAAAtG,EAAAlF,EAAAwF,EAAA,GAEAvE,EAAA6B,MAAAoC,EAAAlF,EAAAwF,EAAA8F,EAAA,MACA9F,EAAA,EA/cApE,EAAAT,UAAAoC,MAAA,SAAAgE,EAAAC,GACA,IAoBA4E,EApBAzI,EAAArB,KAAAN,OAqBA,GApBAuF,MACAC,OAAAzE,IAAAyE,EAAA7D,IAAA6D,EAEAD,EAAA,GACAA,GAAA5D,GACA,IAAA4D,EAAA,GACGA,EAAA5D,IACH4D,EAAA5D,GAGA6D,EAAA,GACAA,GAAA7D,GACA,IAAA6D,EAAA,GACGA,EAAA7D,IACH6D,EAAA7D,GAGA6D,EAAAD,IAAAC,EAAAD,GAGA3F,EAAAC,qBACAuK,EAAA9J,KAAAwG,SAAAvB,EAAAC,IACArF,UAAAP,EAAAT,cACG,CACH,IAAAkL,EAAA7E,EAAAD,EACA6E,EAAA,IAAAxK,EAAAyK,OAAAtJ,GACA,QAAAxD,EAAA,EAAmBA,EAAA8M,IAAc9M,EACjC6M,EAAA7M,GAAA+C,KAAA/C,EAAAgI,GAIA,OAAA6E,GAWAxK,EAAAT,UAAAmL,WAAA,SAAAtG,EAAAlD,EAAAoJ,GACAlG,GAAA,EACAlD,GAAA,EACAoJ,GAAAR,EAAA1F,EAAAlD,EAAAR,KAAAN,QAKA,IAHA,IAAA+B,EAAAzB,KAAA0D,GACAuG,EAAA,EACAhN,EAAA,IACAA,EAAAuD,IAAAyJ,GAAA,MACAxI,GAAAzB,KAAA0D,EAAAzG,GAAAgN,EAGA,OAAAxI,GAGAnC,EAAAT,UAAAqL,WAAA,SAAAxG,EAAAlD,EAAAoJ,GACAlG,GAAA,EACAlD,GAAA,EACAoJ,GACAR,EAAA1F,EAAAlD,EAAAR,KAAAN,QAKA,IAFA,IAAA+B,EAAAzB,KAAA0D,IAAAlD,GACAyJ,EAAA,EACAzJ,EAAA,IAAAyJ,GAAA,MACAxI,GAAAzB,KAAA0D,IAAAlD,GAAAyJ,EAGA,OAAAxI,GAGAnC,EAAAT,UAAAsL,UAAA,SAAAzG,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAA1D,KAAAN,QACAM,KAAA0D,IAGApE,EAAAT,UAAAuL,aAAA,SAAA1G,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAA1D,KAAAN,QACAM,KAAA0D,GAAA1D,KAAA0D,EAAA,OAGApE,EAAAT,UAAAwE,aAAA,SAAAK,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAA1D,KAAAN,QACAM,KAAA0D,IAAA,EAAA1D,KAAA0D,EAAA,IAGApE,EAAAT,UAAAwL,aAAA,SAAA3G,EAAAkG,GAGA,OAFAA,GAAAR,EAAA1F,EAAA,EAAA1D,KAAAN,SAEAM,KAAA0D,GACA1D,KAAA0D,EAAA,MACA1D,KAAA0D,EAAA,QACA,SAAA1D,KAAA0D,EAAA,IAGApE,EAAAT,UAAAyL,aAAA,SAAA5G,EAAAkG,GAGA,OAFAA,GAAAR,EAAA1F,EAAA,EAAA1D,KAAAN,QAEA,SAAAM,KAAA0D,IACA1D,KAAA0D,EAAA,OACA1D,KAAA0D,EAAA,MACA1D,KAAA0D,EAAA,KAGApE,EAAAT,UAAA0L,UAAA,SAAA7G,EAAAlD,EAAAoJ,GACAlG,GAAA,EACAlD,GAAA,EACAoJ,GAAAR,EAAA1F,EAAAlD,EAAAR,KAAAN,QAKA,IAHA,IAAA+B,EAAAzB,KAAA0D,GACAuG,EAAA,EACAhN,EAAA,IACAA,EAAAuD,IAAAyJ,GAAA,MACAxI,GAAAzB,KAAA0D,EAAAzG,GAAAgN,EAMA,OAFAxI,IAFAwI,GAAA,OAEAxI,GAAA4D,KAAAmF,IAAA,IAAAhK,IAEAiB,GAGAnC,EAAAT,UAAA4L,UAAA,SAAA/G,EAAAlD,EAAAoJ,GACAlG,GAAA,EACAlD,GAAA,EACAoJ,GAAAR,EAAA1F,EAAAlD,EAAAR,KAAAN,QAKA,IAHA,IAAAzC,EAAAuD,EACAyJ,EAAA,EACAxI,EAAAzB,KAAA0D,IAAAzG,GACAA,EAAA,IAAAgN,GAAA,MACAxI,GAAAzB,KAAA0D,IAAAzG,GAAAgN,EAMA,OAFAxI,IAFAwI,GAAA,OAEAxI,GAAA4D,KAAAmF,IAAA,IAAAhK,IAEAiB,GAGAnC,EAAAT,UAAA6L,SAAA,SAAAhH,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAA1D,KAAAN,QACA,IAAAM,KAAA0D,IACA,OAAA1D,KAAA0D,GAAA,GADA1D,KAAA0D,IAIApE,EAAAT,UAAA8L,YAAA,SAAAjH,EAAAkG,GACAA,GAAAR,EAAA1F,EAAA,EAAA1D,KAAAN,QACA,IAAA+B,EAAAzB,KAAA0D,GAAA1D,KAAA0D,EAAA,MACA,aAAAjC,EAAA,WAAAA,KAGAnC,EAAAT,UAAA+L,YAAA,SAAAlH,EAAAkG,GACAA,GAAAR,EAAA1F,EAAA,EAAA1D,KAAAN,QACA,IAAA+B,EAAAzB,KAAA0D,EAAA,GAAA1D,KAAA0D,IAAA,EACA,aAAAjC,EAAA,WAAAA,KAGAnC,EAAAT,UAAAgM,YAAA,SAAAnH,EAAAkG,GAGA,OAFAA,GAAAR,EAAA1F,EAAA,EAAA1D,KAAAN,QAEAM,KAAA0D,GACA1D,KAAA0D,EAAA,MACA1D,KAAA0D,EAAA,OACA1D,KAAA0D,EAAA,QAGApE,EAAAT,UAAAiM,YAAA,SAAApH,EAAAkG,GAGA,OAFAA,GAAAR,EAAA1F,EAAA,EAAA1D,KAAAN,QAEAM,KAAA0D,IAAA,GACA1D,KAAA0D,EAAA,OACA1D,KAAA0D,EAAA,MACA1D,KAAA0D,EAAA,IAGApE,EAAAT,UAAAkM,YAAA,SAAArH,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAA1D,KAAAN,QACAP,EAAAgE,KAAAnD,KAAA0D,GAAA,SAGApE,EAAAT,UAAAmM,YAAA,SAAAtH,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAA1D,KAAAN,QACAP,EAAAgE,KAAAnD,KAAA0D,GAAA,SAGApE,EAAAT,UAAAoM,aAAA,SAAAvH,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAA1D,KAAAN,QACAP,EAAAgE,KAAAnD,KAAA0D,GAAA,SAGApE,EAAAT,UAAAqM,aAAA,SAAAxH,EAAAkG,GAEA,OADAA,GAAAR,EAAA1F,EAAA,EAAA1D,KAAAN,QACAP,EAAAgE,KAAAnD,KAAA0D,GAAA,SASApE,EAAAT,UAAAsM,YAAA,SAAAjN,EAAAwF,EAAAlD,EAAAoJ,IACA1L,KACAwF,GAAA,EACAlD,GAAA,EACAoJ,IAEAN,EAAAtJ,KAAA9B,EAAAwF,EAAAlD,EADA6E,KAAAmF,IAAA,IAAAhK,GAAA,EACA,GAGA,IAAAyJ,EAAA,EACAhN,EAAA,EAEA,IADA+C,KAAA0D,GAAA,IAAAxF,IACAjB,EAAAuD,IAAAyJ,GAAA,MACAjK,KAAA0D,EAAAzG,GAAAiB,EAAA+L,EAAA,IAGA,OAAAvG,EAAAlD,GAGAlB,EAAAT,UAAAuM,YAAA,SAAAlN,EAAAwF,EAAAlD,EAAAoJ,IACA1L,KACAwF,GAAA,EACAlD,GAAA,EACAoJ,IAEAN,EAAAtJ,KAAA9B,EAAAwF,EAAAlD,EADA6E,KAAAmF,IAAA,IAAAhK,GAAA,EACA,GAGA,IAAAvD,EAAAuD,EAAA,EACAyJ,EAAA,EAEA,IADAjK,KAAA0D,EAAAzG,GAAA,IAAAiB,IACAjB,GAAA,IAAAgN,GAAA,MACAjK,KAAA0D,EAAAzG,GAAAiB,EAAA+L,EAAA,IAGA,OAAAvG,EAAAlD,GAGAlB,EAAAT,UAAAwM,WAAA,SAAAnN,EAAAwF,EAAAkG,GAMA,OALA1L,KACAwF,GAAA,EACAkG,GAAAN,EAAAtJ,KAAA9B,EAAAwF,EAAA,SACApE,EAAAC,sBAAArB,EAAAmH,KAAAiG,MAAApN,IACA8B,KAAA0D,GAAA,IAAAxF,EACAwF,EAAA,GAWApE,EAAAT,UAAA0M,cAAA,SAAArN,EAAAwF,EAAAkG,GAUA,OATA1L,KACAwF,GAAA,EACAkG,GAAAN,EAAAtJ,KAAA9B,EAAAwF,EAAA,WACApE,EAAAC,qBACAS,KAAA0D,GAAA,IAAAxF,EACA8B,KAAA0D,EAAA,GAAAxF,IAAA,GAEAqL,EAAAvJ,KAAA9B,EAAAwF,GAAA,GAEAA,EAAA,GAGApE,EAAAT,UAAA2M,cAAA,SAAAtN,EAAAwF,EAAAkG,GAUA,OATA1L,KACAwF,GAAA,EACAkG,GAAAN,EAAAtJ,KAAA9B,EAAAwF,EAAA,WACApE,EAAAC,qBACAS,KAAA0D,GAAAxF,IAAA,EACA8B,KAAA0D,EAAA,OAAAxF,GAEAqL,EAAAvJ,KAAA9B,EAAAwF,GAAA,GAEAA,EAAA,GAUApE,EAAAT,UAAA4M,cAAA,SAAAvN,EAAAwF,EAAAkG,GAYA,OAXA1L,KACAwF,GAAA,EACAkG,GAAAN,EAAAtJ,KAAA9B,EAAAwF,EAAA,gBACApE,EAAAC,qBACAS,KAAA0D,EAAA,GAAAxF,IAAA,GACA8B,KAAA0D,EAAA,GAAAxF,IAAA,GACA8B,KAAA0D,EAAA,GAAAxF,IAAA,EACA8B,KAAA0D,GAAA,IAAAxF,GAEAuL,EAAAzJ,KAAA9B,EAAAwF,GAAA,GAEAA,EAAA,GAGApE,EAAAT,UAAA6M,cAAA,SAAAxN,EAAAwF,EAAAkG,GAYA,OAXA1L,KACAwF,GAAA,EACAkG,GAAAN,EAAAtJ,KAAA9B,EAAAwF,EAAA,gBACApE,EAAAC,qBACAS,KAAA0D,GAAAxF,IAAA,GACA8B,KAAA0D,EAAA,GAAAxF,IAAA,GACA8B,KAAA0D,EAAA,GAAAxF,IAAA,EACA8B,KAAA0D,EAAA,OAAAxF,GAEAuL,EAAAzJ,KAAA9B,EAAAwF,GAAA,GAEAA,EAAA,GAGApE,EAAAT,UAAA8M,WAAA,SAAAzN,EAAAwF,EAAAlD,EAAAoJ,GAGA,GAFA1L,KACAwF,GAAA,GACAkG,EAAA,CACA,IAAAgC,EAAAvG,KAAAmF,IAAA,IAAAhK,EAAA,GAEA8I,EAAAtJ,KAAA9B,EAAAwF,EAAAlD,EAAAoL,EAAA,GAAAA,GAGA,IAAA3O,EAAA,EACAgN,EAAA,EACA4B,EAAA,EAEA,IADA7L,KAAA0D,GAAA,IAAAxF,IACAjB,EAAAuD,IAAAyJ,GAAA,MACA/L,EAAA,OAAA2N,GAAA,IAAA7L,KAAA0D,EAAAzG,EAAA,KACA4O,EAAA,GAEA7L,KAAA0D,EAAAzG,IAAAiB,EAAA+L,GAAA,GAAA4B,EAAA,IAGA,OAAAnI,EAAAlD,GAGAlB,EAAAT,UAAAiN,WAAA,SAAA5N,EAAAwF,EAAAlD,EAAAoJ,GAGA,GAFA1L,KACAwF,GAAA,GACAkG,EAAA,CACA,IAAAgC,EAAAvG,KAAAmF,IAAA,IAAAhK,EAAA,GAEA8I,EAAAtJ,KAAA9B,EAAAwF,EAAAlD,EAAAoL,EAAA,GAAAA,GAGA,IAAA3O,EAAAuD,EAAA,EACAyJ,EAAA,EACA4B,EAAA,EAEA,IADA7L,KAAA0D,EAAAzG,GAAA,IAAAiB,IACAjB,GAAA,IAAAgN,GAAA,MACA/L,EAAA,OAAA2N,GAAA,IAAA7L,KAAA0D,EAAAzG,EAAA,KACA4O,EAAA,GAEA7L,KAAA0D,EAAAzG,IAAAiB,EAAA+L,GAAA,GAAA4B,EAAA,IAGA,OAAAnI,EAAAlD,GAGAlB,EAAAT,UAAAkN,UAAA,SAAA7N,EAAAwF,EAAAkG,GAOA,OANA1L,KACAwF,GAAA,EACAkG,GAAAN,EAAAtJ,KAAA9B,EAAAwF,EAAA,YACApE,EAAAC,sBAAArB,EAAAmH,KAAAiG,MAAApN,IACAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,GACA8B,KAAA0D,GAAA,IAAAxF,EACAwF,EAAA,GAGApE,EAAAT,UAAAmN,aAAA,SAAA9N,EAAAwF,EAAAkG,GAUA,OATA1L,KACAwF,GAAA,EACAkG,GAAAN,EAAAtJ,KAAA9B,EAAAwF,EAAA,gBACApE,EAAAC,qBACAS,KAAA0D,GAAA,IAAAxF,EACA8B,KAAA0D,EAAA,GAAAxF,IAAA,GAEAqL,EAAAvJ,KAAA9B,EAAAwF,GAAA,GAEAA,EAAA,GAGApE,EAAAT,UAAAoN,aAAA,SAAA/N,EAAAwF,EAAAkG,GAUA,OATA1L,KACAwF,GAAA,EACAkG,GAAAN,EAAAtJ,KAAA9B,EAAAwF,EAAA,gBACApE,EAAAC,qBACAS,KAAA0D,GAAAxF,IAAA,EACA8B,KAAA0D,EAAA,OAAAxF,GAEAqL,EAAAvJ,KAAA9B,EAAAwF,GAAA,GAEAA,EAAA,GAGApE,EAAAT,UAAAqN,aAAA,SAAAhO,EAAAwF,EAAAkG,GAYA,OAXA1L,KACAwF,GAAA,EACAkG,GAAAN,EAAAtJ,KAAA9B,EAAAwF,EAAA,0BACApE,EAAAC,qBACAS,KAAA0D,GAAA,IAAAxF,EACA8B,KAAA0D,EAAA,GAAAxF,IAAA,EACA8B,KAAA0D,EAAA,GAAAxF,IAAA,GACA8B,KAAA0D,EAAA,GAAAxF,IAAA,IAEAuL,EAAAzJ,KAAA9B,EAAAwF,GAAA,GAEAA,EAAA,GAGApE,EAAAT,UAAAsN,aAAA,SAAAjO,EAAAwF,EAAAkG,GAaA,OAZA1L,KACAwF,GAAA,EACAkG,GAAAN,EAAAtJ,KAAA9B,EAAAwF,EAAA,0BACAxF,EAAA,IAAAA,EAAA,WAAAA,EAAA,GACAoB,EAAAC,qBACAS,KAAA0D,GAAAxF,IAAA,GACA8B,KAAA0D,EAAA,GAAAxF,IAAA,GACA8B,KAAA0D,EAAA,GAAAxF,IAAA,EACA8B,KAAA0D,EAAA,OAAAxF,GAEAuL,EAAAzJ,KAAA9B,EAAAwF,GAAA,GAEAA,EAAA,GAgBApE,EAAAT,UAAAuN,aAAA,SAAAlO,EAAAwF,EAAAkG,GACA,OAAAD,EAAA3J,KAAA9B,EAAAwF,GAAA,EAAAkG,IAGAtK,EAAAT,UAAAwN,aAAA,SAAAnO,EAAAwF,EAAAkG,GACA,OAAAD,EAAA3J,KAAA9B,EAAAwF,GAAA,EAAAkG,IAWAtK,EAAAT,UAAAyN,cAAA,SAAApO,EAAAwF,EAAAkG,GACA,OAAAC,EAAA7J,KAAA9B,EAAAwF,GAAA,EAAAkG,IAGAtK,EAAAT,UAAA0N,cAAA,SAAArO,EAAAwF,EAAAkG,GACA,OAAAC,EAAA7J,KAAA9B,EAAAwF,GAAA,EAAAkG,IAIAtK,EAAAT,UAAA0C,KAAA,SAAA+G,EAAAkE,EAAAvH,EAAAC,GAQA,GAPAD,MAAA,GACAC,GAAA,IAAAA,MAAAlF,KAAAN,QACA8M,GAAAlE,EAAA5I,SAAA8M,EAAAlE,EAAA5I,QACA8M,MAAA,GACAtH,EAAA,GAAAA,EAAAD,IAAAC,EAAAD,GAGAC,IAAAD,EAAA,SACA,OAAAqD,EAAA5I,QAAA,IAAAM,KAAAN,OAAA,SAGA,GAAA8M,EAAA,EACA,UAAA7M,WAAA,6BAEA,GAAAsF,EAAA,GAAAA,GAAAjF,KAAAN,OAAA,UAAAC,WAAA,6BACA,GAAAuF,EAAA,YAAAvF,WAAA,2BAGAuF,EAAAlF,KAAAN,SAAAwF,EAAAlF,KAAAN,QACA4I,EAAA5I,OAAA8M,EAAAtH,EAAAD,IACAC,EAAAoD,EAAA5I,OAAA8M,EAAAvH,GAGA,IACAhI,EADAoE,EAAA6D,EAAAD,EAGA,GAAAjF,OAAAsI,GAAArD,EAAAuH,KAAAtH,EAEA,IAAAjI,EAAAoE,EAAA,EAAqBpE,GAAA,IAAQA,EAC7BqL,EAAArL,EAAAuP,GAAAxM,KAAA/C,EAAAgI,QAEG,GAAA5D,EAAA,MAAA/B,EAAAC,oBAEH,IAAAtC,EAAA,EAAeA,EAAAoE,IAASpE,EACxBqL,EAAArL,EAAAuP,GAAAxM,KAAA/C,EAAAgI,QAGArF,WAAAf,UAAA4N,IAAArP,KACAkL,EACAtI,KAAAwG,SAAAvB,IAAA5D,GACAmL,GAIA,OAAAnL,GAOA/B,EAAAT,UAAAkI,KAAA,SAAAtF,EAAAwD,EAAAC,EAAArE,GAEA,oBAAAY,EAAA,CASA,GARA,iBAAAwD,GACApE,EAAAoE,EACAA,EAAA,EACAC,EAAAlF,KAAAN,QACK,iBAAAwF,IACLrE,EAAAqE,EACAA,EAAAlF,KAAAN,QAEA,IAAA+B,EAAA/B,OAAA,CACA,IAAAgN,EAAAjL,EAAA8C,WAAA,GACAmI,EAAA,MACAjL,EAAAiL,GAGA,QAAAjM,IAAAI,GAAA,iBAAAA,EACA,UAAAT,UAAA,6BAEA,oBAAAS,IAAAvB,EAAAwB,WAAAD,GACA,UAAAT,UAAA,qBAAAS,OAEG,iBAAAY,IACHA,GAAA,KAIA,GAAAwD,EAAA,GAAAjF,KAAAN,OAAAuF,GAAAjF,KAAAN,OAAAwF,EACA,UAAAvF,WAAA,sBAGA,GAAAuF,GAAAD,EACA,OAAAjF,KAQA,IAAA/C,EACA,GANAgI,KAAA,EACAC,OAAAzE,IAAAyE,EAAAlF,KAAAN,OAAAwF,IAAA,EAEAzD,MAAA,GAGA,iBAAAA,EACA,IAAAxE,EAAAgI,EAAmBhI,EAAAiI,IAASjI,EAC5B+C,KAAA/C,GAAAwE,MAEG,CACH,IAAA0H,EAAA7J,EAAA8B,SAAAK,GACAA,EACAU,EAAA,IAAA7C,EAAAmC,EAAAZ,GAAAmB,YACAX,EAAA8H,EAAAzJ,OACA,IAAAzC,EAAA,EAAeA,EAAAiI,EAAAD,IAAiBhI,EAChC+C,KAAA/C,EAAAgI,GAAAkE,EAAAlM,EAAAoE,GAIA,OAAArB,MAMA,IAAA2M,EAAA,qBAmBA,SAAAzD,EAAAxK,GACA,OAAAA,EAAA,OAAAA,EAAAsD,SAAA,IACAtD,EAAAsD,SAAA,IAGA,SAAAG,EAAAvB,EAAAgE,GAEA,IAAAiB,EADAjB,KAAAgI,IAMA,IAJA,IAAAlN,EAAAkB,EAAAlB,OACAmN,EAAA,KACA1D,KAEAlM,EAAA,EAAiBA,EAAAyC,IAAYzC,EAAA,CAI7B,IAHA4I,EAAAjF,EAAA2D,WAAAtH,IAGA,OAAA4I,EAAA,OAEA,IAAAgH,EAAA,CAEA,GAAAhH,EAAA,QAEAjB,GAAA,OAAAuE,EAAA7E,KAAA,aACA,SACS,GAAArH,EAAA,IAAAyC,EAAA,EAETkF,GAAA,OAAAuE,EAAA7E,KAAA,aACA,SAIAuI,EAAAhH,EAEA,SAIA,GAAAA,EAAA,QACAjB,GAAA,OAAAuE,EAAA7E,KAAA,aACAuI,EAAAhH,EACA,SAIAA,EAAA,OAAAgH,EAAA,UAAAhH,EAAA,YACKgH,IAELjI,GAAA,OAAAuE,EAAA7E,KAAA,aAMA,GAHAuI,EAAA,KAGAhH,EAAA,KACA,IAAAjB,GAAA,WACAuE,EAAA7E,KAAAuB,QACK,GAAAA,EAAA,MACL,IAAAjB,GAAA,WACAuE,EAAA7E,KACAuB,GAAA,MACA,GAAAA,EAAA,UAEK,GAAAA,EAAA,OACL,IAAAjB,GAAA,WACAuE,EAAA7E,KACAuB,GAAA,OACAA,GAAA,SACA,GAAAA,EAAA,SAEK,MAAAA,EAAA,SASL,UAAA5F,MAAA,sBARA,IAAA2E,GAAA,WACAuE,EAAA7E,KACAuB,GAAA,OACAA,GAAA,UACAA,GAAA,SACA,GAAAA,EAAA,MAOA,OAAAsD,EA4BA,SAAA/G,EAAAgC,GACA,OAAAlF,EAAA4N,YAhIA,SAAA1I,GAIA,IAFAA,EAUA,SAAAA,GACA,OAAAA,EAAA2I,KAAA3I,EAAA2I,OACA3I,EAAA4I,QAAA,iBAZAC,CAAA7I,GAAA4I,QAAAL,EAAA,KAEAjN,OAAA,WAEA,KAAA0E,EAAA1E,OAAA,MACA0E,GAAA,IAEA,OAAAA,EAuHA8I,CAAA9I,IAGA,SAAAF,EAAAiJ,EAAAC,EAAA1J,EAAAhE,GACA,QAAAzC,EAAA,EAAiBA,EAAAyC,KACjBzC,EAAAyG,GAAA0J,EAAA1N,QAAAzC,GAAAkQ,EAAAzN,UAD6BzC,EAE7BmQ,EAAAnQ,EAAAyG,GAAAyJ,EAAAlQ,GAEA,OAAAA,qDCvvDA,SAAAqC,GAOA,MAAA+N,EAAAxQ,EAAA,GAEAyQ,EAAAzQ,EAAA,IAEAE,EAAAwQ,MAAAD,EAAAC,MACAxQ,EAAAyQ,MAAAF,EAAAE,MACAzQ,EAAA0Q,eAAAH,EAAAG,eAEA,MAAAC,EAAA7Q,EAAA,GAiMA,SAAA8Q,EAAAC,GACA7Q,EAAA8Q,OAAAD,GA1LA7Q,EAAA+Q,YAAA,SAAAC,GACA,IAAAzO,EAAA8B,SAAA2M,GACA,UAAA9N,MAAA,2BAGA,OAAA8N,EAAA/L,SAAA,QASAjF,EAAAiR,cAAA,SAAAD,GACA,OAAAzO,EAAAa,KAAA4N,EAAA,QASAhR,EAAAkR,YAAA,SAAAF,GACA,IAAAzO,EAAA8B,SAAA2M,GACA,UAAA9N,MAAA,2BAGA,OAAAoN,EAAAa,OAAAH,IASAhR,EAAAoR,cAAA,SAAAJ,GACA,IAAAK,EAAAL,EAKA,OAJAzO,EAAA8B,SAAA2M,KACAK,EAAAL,EAAA/L,YAGA1C,EAAAa,KAAAkN,EAAAQ,OAAAO,KASArR,EAAA8Q,OAAA,SAAAzK,GACA,IAAA9D,EAAA8B,SAAAgC,GACA,UAAAnD,MAAA,8BAGA,GAAAmD,EAAA1D,OAAA,EACA,UAAAO,MAAA,2CAGA,IAAAyM,EAAAgB,EAAAG,OAAAzK,GACA,IAAArG,EAAAsR,YAAA3B,GACA,UAAAzM,4CAA0DyM,EAAA1K,SAAA,OAE1DoB,IAAAnC,MAAAyM,EAAAG,OAAA1E,OAEA,IAAA9H,EAAAqM,EAAAG,OAAAzK,GACA,GAAA/B,EAAA,EACA,UAAApB,qCAAmDoB,EAAAW,SAAA,OAInD,IAFAoB,IAAAnC,MAAAyM,EAAAG,OAAA1E,QAEAzJ,SAAA2B,EACA,UAAApB,0CAAwDmD,EAAApB,SAAA,UAGxD,OACA0K,OACAlP,KAAA8P,EAAAE,MAAAd,GACAhN,OAAA2B,EACAiN,OAAAlL,IAcArG,EAAAmR,OAAA,SAAAI,EAAA5B,EAAAhN,GACA,IAAA4O,IAAA5B,EACA,UAAAzM,MAAA,6DAIA,MAAAsO,EAAAxR,EAAAyR,WAAA9B,GAEA,IAAApN,EAAA8B,SAAAkN,GACA,UAAArO,MAAA,6BAOA,GAJA,MAAAP,IACAA,EAAA4O,EAAA5O,QAGAA,GAAA4O,EAAA5O,WACA,UAAAO,MAAA,sDAGA,OAAAX,EAAAgI,QACAhI,EAAAa,KAAAuN,EAAAQ,OAAAK,IACAjP,EAAAa,KAAAuN,EAAAQ,OAAAxO,IACA4O,KAUAvR,EAAAyR,WAAA,SAAAhR,GACA,IAAAkP,EAAAlP,EAEA,oBAAAA,EAAA,CACA,IAAA8P,EAAAC,MAAA/P,GACA,UAAAyC,2CAA2DzC,KAE3DkP,EAAAY,EAAAC,MAAA/P,GAGA,oBAAAkP,EACA,UAAAzM,qDAAmEyM,KAGnE,IAAAY,EAAAE,MAAAd,KAAA3P,EAAA0R,UAAA/B,GACA,UAAAzM,qCAAmDyM,KAGnD,OAAAA,GASA3P,EAAA0R,UAAA,SAAA/B,GACA,OAAAA,EAAA,GAAAA,EAAA,IASA3P,EAAAsR,YAAA,SAAA3B,GACA,QAAA3P,EAAA0R,UAAA/B,MAIAY,EAAAE,MAAAd,IAiBA3P,EAAA4Q,WASA5Q,EAAA2R,OAAA,SAAAd,GAGA,OAFAD,EAAAC,GAEAA,EAAA3M,MAAA,gDC/NAjE,EAAAD,SACAmR,OAAArR,EAAA,IACAgR,OAAAhR,EAAA,IACA8R,eAAA9R,EAAA,iDCCAE,EAAAC,EAAAD,SAGA,IAAAuC,EAAAa,KAAA,YAGApD,EAAA,MAAAuC,EAAAa,KAAA,YACApD,EAAA,MAAAuC,EAAAa,KAAA,YACApD,EAAA,MAAAuC,EAAAa,KAAA,YACApD,EAAA,OAAAuC,EAAAa,KAAA,YAGApD,EAAA,KAAAuC,EAAAa,KAAA,YACApD,EAAA,SAAAuC,EAAAa,KAAA,YACApD,EAAA,IAAAuC,EAAAa,KAAA,YACApD,EAAA,QAAAuC,EAAAa,KAAA,YAGApD,EAAA,WAAAuC,EAAAa,KAAA,YACApD,EAAA,UAAAuC,EAAAa,KAAA,YACApD,EAAA,UAAAuC,EAAAa,KAAA,YACApD,EAAA,UAAAuC,EAAAa,KAAA,YACApD,EAAA,IAAAuC,EAAAa,KAAA,YACApD,EAAA,IAAAuC,EAAAa,KAAA,YAGApD,EAAA,KAAAuC,EAAAa,KAAA,YACApD,EAAA,YAAAuC,EAAAa,KAAA,YACApD,EAAA,YAAAuC,EAAAa,KAAA,YACApD,EAAA,gBAAAuC,EAAAa,KAAA,YACApD,EAAA,YAAAuC,EAAAa,KAAA,YACApD,EAAA,YAAAuC,EAAAa,KAAA,YACApD,EAAA,YAAAuC,EAAAa,KAAA,YACApD,EAAA,YAAAuC,EAAAa,KAAA,YACApD,EAAA,aAAAuC,EAAAa,KAAA,YACApD,EAAA,aAAAuC,EAAAa,KAAA,YACApD,EAAA,cAAAuC,EAAAa,KAAA,YACApD,EAAA,cAAAuC,EAAAa,KAAA,YACApD,EAAA,cAAAuC,EAAAa,KAAA,YACApD,EAAA,cAAAuC,EAAAa,KAAA,YACApD,EAAA,QAAAuC,EAAAa,KAAA,YACApD,EAAA,aAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,aAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,cAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,eAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,gBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAAAuC,EAAAa,KAAA,cACApD,EAAA,iBAA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AC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,aAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,aAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,cAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,cAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,eAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,KACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,gBAAA,MACAC,iBAAA,MACAC,iBAAA,MACAC,iBAAA,MACAC,iBAAA,QAGAntB,EAAAyQ,MAAA7P,OAAAuX,QACAiV,GAAA,OACAC,GAAA,WACAC,GAAA,WACAC,GAAA,eACAC,GAAA,WACAC,GAAA,WACAC,GAAA,WACAC,GAAA,WACAC,GAAA,YACAC,GAAA,YACAC,GAAA,aACAC,GAAA,aACAC,GAAA,aACAC,GAAA,aACAC,GAAA,cACAC,GAAA,aAGAC,MAAA,YACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,YACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cAGAC,MAAA,aACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,aACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,cACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,cACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,eACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,gBACAC,MAAA,iBACAC,MAAA,iBACAC,MAAA,iBACAC,MAAA,mBAGAniC,EAAA0Q,eAAA9P,OAAAuX,QACAiV,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GAEAE,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,GACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,IACAC,MAAA,qBC9/BAliC,EAAAD,QAOA,SAAAmR,EAAA2C,EAAA5H,EAAAvF,GACAuF,QACAvF,KAAA,EACA,IAAAy7B,EAAAz7B,EAEA,KAAAmN,GAAAuuB,GACAn2B,EAAAvF,KAAA,IAAAmN,EAAAwuB,EACAxuB,GAAA,IAEA,KAAAA,EAAAyuB,GACAr2B,EAAAvF,KAAA,IAAAmN,EAAAwuB,EACAxuB,KAAA,EAEA5H,EAAAvF,GAAA,EAAAmN,EAEA3C,EAAA/E,MAAAzF,EAAAy7B,EAAA,EAEA,OAAAl2B,GAtBA,IAAAo2B,EAAA,IAEAC,GAAA,IACAF,EAAA/5B,KAAAmF,IAAA,qBCLAxN,EAAAD,QAKA,SAAAoG,EAAAC,EAAAM,GACA,IAIAnB,EAJAgD,EAAA,EACA7B,KAAA,EACA67B,EAAA,EACAC,EAAA97B,EAEAxG,EAAAkG,EAAA1D,OAEA,GACA,GAAA8/B,GAAAtiC,EAEA,MADAiG,EAAAgG,MAAA,EACA,IAAAxJ,WAAA,2BAEA4C,EAAAa,EAAAo8B,KACAj6B,GAAAg6B,EAAA,IACAh9B,EAAAk9B,IAAAF,GACAh9B,EAAAk9B,GAAAp6B,KAAAmF,IAAA,EAAA+0B,GACAA,GAAA,QACGh9B,GAAA88B,GAEHl8B,EAAAgG,MAAAq2B,EAAA97B,EAEA,OAAA6B,GAzBA,IAAA85B,EAAA,IACAI,EAAA,mBCFA,IAAAC,EAAAr6B,KAAAmF,IAAA,KACAm1B,EAAAt6B,KAAAmF,IAAA,MACAo1B,EAAAv6B,KAAAmF,IAAA,MACAq1B,EAAAx6B,KAAAmF,IAAA,MACAs1B,EAAAz6B,KAAAmF,IAAA,MACAu1B,EAAA16B,KAAAmF,IAAA,MACAw1B,EAAA36B,KAAAmF,IAAA,MACAy1B,EAAA56B,KAAAmF,IAAA,MACA01B,EAAA76B,KAAAmF,IAAA,MAEAxN,EAAAD,QAAA,SAAAmB,GACA,OACAA,EAAAwhC,EAAA,EACAxhC,EAAAyhC,EAAA,EACAzhC,EAAA0hC,EAAA,EACA1hC,EAAA2hC,EAAA,EACA3hC,EAAA4hC,EAAA,EACA5hC,EAAA6hC,EAAA,EACA7hC,EAAA8hC,EAAA,EACA9hC,EAAA+hC,EAAA,EACA/hC,EAAAgiC,EAAA,EACA,kCCpBA,MAAAC,EAAAtjC,EAAA,IACAujC,EAAAvjC,EAAA,GACAwjC,EAAAxjC,EAAA,IACAyjC,EAAAzjC,EAAA,IACAqC,EAAArC,EAAA,IAGA6S,IACA,qBACA,YAAA0wB,EAAA,OACA,YAAAA,EAAA,aACA,aAAAA,EAAA,eACA,aAAAC,EAAA,qBACA,aAAAC,EAAA,qCACA,gBAAAA,EAAA,sCACA,gBAAAA,EAAA,qCACA,mBAAAA,EAAA,sCACA,cAAAA,EAAA,qCACA,mBAAAF,EAAA,+DACA,gBAAAA,EAAA,+DACA,aAAAlhC,EAAA,qEACA,gBAAAA,EAAA,sEACA,gBAAAA,EAAA,qEACA,mBAAAA,EAAA,sEAGAqO,EAAAmC,EAAA6wB,OAAA,CAAAC,EAAAC,KACAD,EAAAC,EAAA,QAAAN,EAAAM,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAD,OAGAhzB,EAAAkC,EAAA6wB,OAAA,CAAAC,EAAAC,KACAD,EAAAC,EAAA,IAAAlzB,EAAAkzB,EAAA,IACAD,OAGAxjC,EAAAD,SACAwQ,QACAC,uCCfAxQ,EAAAD,cAtBA2jC,YAAAljC,EAAAkP,EAAAi0B,EAAAC,GACA5gC,KAAAxC,OACAwC,KAAA0M,OACA1M,KAAA4gC,WACAD,GAAAC,IACA5gC,KAAA6gC,OAAAF,EAAAC,IAIAF,OAAAI,GACA,OAAA9gC,KAAA6gC,OAAA3yB,OAAA4yB,GAGAJ,OAAAI,GACA,OAAA9gC,KAAA6gC,OAAAhzB,OAAAizB,GAGAJ,gBACA,OAAA1gC,KAAA6gC,oDCnBA7jC,EAAAD,QAAA,SAAA6jC,GACA,OACA1yB,OAAA6C,GACA,iBAAAA,EACAzR,EAAAa,KAAA4Q,GAAA/O,SAAA,OAEA+O,EAAA/O,SAAA,OAEA0+B,OAAA3vB,GACA,QAAAgwB,KAAAhwB,EACA,GAAA6vB,EAAAh+B,QAAAm+B,GAAA,EACA,UAAA9gC,MAAA,4BAGA,OAAAX,EAAAa,KAAA4Q,EAAA,8ECSA,SAAA7C,EAAA1M,EAAAo/B,GACA,IAAAlhC,EAAA8B,EAAAhB,WACAwgC,EAAA,IAAAphC,WAAA4B,GACAy/B,EAAAL,EAAAh+B,QAAA,OAAAg+B,EAAAlhC,OAAA,EAEAuhC,IACAL,IAAA5wB,UAAA,EAAA4wB,EAAAlhC,OAAA,IAGA,IAAAwhC,EAAA,EACAhjC,EAAA,EACAiW,EAAA,GAEA,QAAAlX,EAAA,EAAiBA,EAAAyC,EAAYzC,IAI7B,IAHAiB,KAAA,EAAA8iC,EAAA/jC,GACAikC,GAAA,EAEAA,GAAA,GACA/sB,GAAAysB,EAAA1iC,IAAAgjC,EAAA,MACAA,GAAA,EAQA,GAJAA,EAAA,IACA/sB,GAAAysB,EAAA1iC,GAAA,EAAAgjC,EAAA,KAGAD,EACA,KAAA9sB,EAAAzU,OAAA,MACAyU,GAAA,IAIA,OAAAA,EAGAnX,EAAAD,QAAA,SAAA6jC,GACA,OACA1yB,OAAA6C,GAEA7C,EADA,iBAAA6C,EACAzR,EAAAa,KAAA4Q,GAGAA,EAHA6vB,GAKAF,OAAA3vB,GACA,QAAAgwB,KAAAhwB,EACA,GAAA6vB,EAAAh+B,QAAAm+B,GAAA,EACA,UAAA9gC,MAAA,4BAIA,OA3EA,SAAA8Q,EAAA6vB,GAEA,IAAAlhC,GADAqR,IAAA/D,QAAA,IAAAm0B,OAAA,cACAzhC,OAEAwhC,EAAA,EACAhjC,EAAA,EAEAkjC,EAAA,EACAjtB,EAAA,IAAAvU,WAAA,EAAAF,EAAA,KAEA,QAAAzC,EAAA,EAAiBA,EAAAyC,EAAYzC,IAC7BiB,KAAA,EAAA0iC,EAAAh+B,QAAAmO,EAAA9T,KACAikC,GAAA,IAEA,IACA/sB,EAAAitB,KAAAljC,IAAAgjC,EAAA,MACAA,GAAA,GAIA,OAAA/sB,EAAA3S,OAuDAqM,CAAAkD,EAAA6vB,0EC3EA5jC,EAAAD,QAAA,SAAA6jC,GAMA,MAAAK,EAAAL,EAAAh+B,QAAA,QACAqP,EAAA2uB,EAAAh+B,QAAA,SAAAg+B,EAAAh+B,QAAA,QAEA,OACA89B,OAAA3vB,GACA,IAAAoD,EAAA,GAGAA,EADA,iBAAApD,EACAzR,EAAAa,KAAA4Q,GAAA/O,SAAA,UAEA+O,EAAA/O,SAAA,UAGAiQ,IAEAkC,GADAA,IAAAnH,QAAA,UACAA,QAAA,UAGA,MAAAq0B,EAAAltB,EAAAvR,QAAA,KAKA,OAJAy+B,EAAA,IAAAJ,IACA9sB,IAAAnE,UAAA,EAAAqxB,IAGAltB,GAEAusB,OAAA3vB,GACAkB,IAEAlB,GADAA,IAAA/D,QAAA,UACAA,QAAA,UAGA,QAAA+zB,KAAAhwB,EACA,GAAA6vB,EAAAh+B,QAAAm+B,GAAA,EACA,UAAA9gC,MAAA,4BAIA,OAAAX,EAAAa,KAAA4Q,EAAA,iFC3CA,MAAAuwB,EAAAzkC,EAAA,GACA8S,EAAA9S,EAAA,GACA0kC,EAAA1kC,EAAA,IACA2kC,EAAA3kC,EAAA,GACA4kC,EAAA5kC,EAAA,GACA+Q,EAAA/Q,EAAA,GACA6kC,EAAA7kC,EAAA,UAeAqU,EAgCAwvB,YAAAiB,EAAAC,EAAAh0B,GACA,GAAAsD,EAAAM,MAAAmwB,GAAA,CACA,IAAAxvB,EAAAwvB,EAIA,OAHA3hC,KAAA2hC,QAAAxvB,EAAAwvB,QACA3hC,KAAA4hC,MAAAzvB,EAAAyvB,WACA5hC,KAAA4N,UAAAtO,EAAAa,KAAAgS,EAAAvE,YAGA,oBAAA+zB,EACA,GAAAhyB,EAAAM,UAAA0xB,GAAA,CACA,MAAAxvB,EAAAxC,EAAA9B,OAAA8zB,GACAA,EAAA59B,SAAAoO,EAAAlR,MAAA,KAAAe,SAAA,WACA4/B,EAAAL,EAAAM,SAAA1vB,EAAAlR,MAAA,IACA2M,EAAA2zB,EAAAO,SAAA3vB,EAAAlR,MAAA,SAEA2gC,EAAA,SACAh0B,EAAA0zB,EAAAnzB,cAAAwzB,GACAA,EAAA,OAEK,GAAAriC,EAAA8B,SAAAugC,GAAA,CACL,MAAA/7B,EAAA+7B,EAAA1gC,MAAA,KACA8gC,EAAAh+B,SAAA6B,EAAA5D,SAAA,WACA,OAAA+/B,GAAA,IAAAA,EAAA,CACA,MAAA5vB,EAAAwvB,EACAA,EAAAI,EACAH,EAAAL,EAAAM,SAAA1vB,EAAAlR,MAAA,IACA2M,EAAA2zB,EAAAO,SAAA3vB,EAAAlR,MAAA,SAEA2gC,EAAA,SACAh0B,EAAA+zB,EACAA,EAAA,EAOA3hC,KAAA4hC,QAKA5hC,KAAA2hC,UAKA3hC,KAAA4N,YAEAsD,EAAA8wB,YAAAhiC,MAWAwB,aACA,OAAAxB,KAAA2hC,SACA,OACA,OAAA3hC,KAAA4N,UACA,OACA,OAAAtO,EAAAgI,QACAhI,EAAAa,KAAA,YACAb,EAAAa,KAAAshC,EAAAzhC,KAAA4hC,QACA5hC,KAAA4N,YAEA,QACA,UAAA3N,MAAA,wBAUAyO,aACA,OAAApP,EAAAgI,QACAhI,EAAAa,SAAsBH,KAAA2hC,UAAa,OACnCF,EAAAzhC,KAAA4hC,OACAh0B,EAAAc,OAAA1O,KAAA4N,aASA8yB,OACA,cAAA1gC,KAAA4hC,MACA,UAAA3hC,MAAA,4CAGA,WAAAiR,EAAA,EAAAlR,KAAA4hC,MAAA5hC,KAAA4N,WAQA8yB,OACA,WAAAxvB,EAAA,EAAAlR,KAAA4hC,MAAA5hC,KAAA4N,WASA8yB,oBAAA7wB,GAGA,OAFAA,KAAA,YAEA7P,KAAA2hC,SACA,OACA,iBAAA9xB,EACA,UAAA5P,MAAA,kIAEA,OAAAqhC,EAAArzB,YAAAjO,KAAA4N,WAEA,OACA,OAAA+B,EAAAzB,OAAA2B,EAAA7P,KAAAwB,QAAAQ,WACA,QACA,UAAA/B,MAAA,wBASAygC,SACA,OACAkB,MAAA5hC,KAAA4hC,MACAD,QAAA3hC,KAAA2hC,QACA5zB,KAAA/N,KAAA4N,WAUA8yB,OAAAuB,GACA,OAAAjiC,KAAA4hC,QAAAK,EAAAL,OACA5hC,KAAA2hC,UAAAM,EAAAN,SACA3hC,KAAA4N,UAAA3F,OAAAg6B,EAAAr0B,WASA8yB,aAAAuB,GACA,OAAAP,EAAAQ,mBAAAD,GAUAvB,mBAAAuB,GACA,IAAAE,EAAAT,EAAAQ,mBAAAD,GACA,GAAAE,EACA,UAAAliC,MAAAkiC,IAKAjxB,EAAAswB,SAEAxkC,EAAAD,QAAAmU,0DCjPA,SAAA5R,GAaA,MAAAoO,EAAA7Q,EAAA,GACAulC,EAAAvlC,EAAA,GACAwlC,EAAAxlC,EAAA,IACAylC,EAAAzlC,EAAA,IAEAE,EAAAC,EAAAD,SASAwlC,UAAA,EAAAC,EAAA5gC,KACA,IAAA8M,EAEA,GAAApP,EAAA8B,SAAAohC,GACA9zB,EAAA4zB,EAAA9xB,mBAAAgyB,OACG,CACH,IAAAJ,EAAAI,GAGA,UAAAviC,MAAA,6BAFAyO,EAAA0zB,EAAAI,GAKA,OAAAljC,EAAAgI,QAAAoH,EAAA9M,MASA7E,EAAA+kC,SAAA,CAAAlgC,IACA8L,EAAAG,OAAAjM,GACAA,EAAAX,MAAAyM,EAAAG,OAAA1E,SAQApM,EAAA8kC,SAAA,CAAAY,IACA,MAAA/1B,EAAA41B,EAAAtxB,mBAAAyxB,GACAC,EAAAL,EAAA31B,EAAA1K,SAAA,QACA,QAAAvB,IAAAiiC,EACA,UAAAziC,MAAA,WAAAyM,EAAA1K,SAAA,sBAEA,OAAA0gC,IAQA3lC,EAAA4lC,cAAA,CAAAD,IACA,MAAAh2B,EAAA01B,EAAAM,GACA,QAAAjiC,IAAAiM,EACA,UAAAzM,MAAA,UAAAyiC,EAAA,eAEA,OAAAh2B,IASA3P,EAAA6lC,SAAA,EAAAplC,EAAAkP,KACA01B,EAAA5kC,GAAA8kC,EAAA9xB,mBAAA9D,GACA21B,EAAA31B,EAAA1K,SAAA,QAAAxE,2DCvFA,MAAA+S,EAAA1T,EAAA,GAIAgmC,KACA7lC,EAAAD,QAAA8lC,EAEA,QAAAnyB,KAAAH,EAAA,CAEAsyB,EADAtyB,EAAAG,GACA1O,SAAA,QAAA0O,8CCRA,MAAA4wB,EAAAzkC,EAAA,GAEA,IAAA6kC,GASAQ,mBAAA,SAAAD,GACA,SAAAA,EACA,uCAGA,OAAAA,EAAAN,SAAA,IAAAM,EAAAN,QACA,0DAGA,oBAAAM,EAAAL,MACA,6BAGA,IAAAtiC,EAAA8B,SAAA6gC,EAAAr0B,WACA,mCAGA,IACA0zB,EAAA3zB,SAAAs0B,EAAAr0B,WACK,MAAAsC,GACL,IAAAiyB,EAAAjyB,EAAA4yB,QAIA,OAHAX,IACAA,EAAA,+BAEAA,KAKAnlC,EAAAD,QAAA2kC","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","/**\n * Multihash implementation in JavaScript.\n *\n * @module multihash\n */\n'use strict'\n\nconst bs58 = require('bs58')\n\nconst cs = require('./constants')\n\nexports.names = cs.names\nexports.codes = cs.codes\nexports.defaultLengths = cs.defaultLengths\n\nconst varint = require('varint')\n\n/**\n * Convert the given multihash to a hex encoded string.\n *\n * @param {Buffer} hash\n * @returns {string}\n */\nexports.toHexString = function toHexString (hash) {\n  if (!Buffer.isBuffer(hash)) {\n    throw new Error('must be passed a buffer')\n  }\n\n  return hash.toString('hex')\n}\n\n/**\n * Convert the given hex encoded string to a multihash.\n *\n * @param {string} hash\n * @returns {Buffer}\n */\nexports.fromHexString = function fromHexString (hash) {\n  return Buffer.from(hash, 'hex')\n}\n\n/**\n * Convert the given multihash to a base58 encoded string.\n *\n * @param {Buffer} hash\n * @returns {string}\n */\nexports.toB58String = function toB58String (hash) {\n  if (!Buffer.isBuffer(hash)) {\n    throw new Error('must be passed a buffer')\n  }\n\n  return bs58.encode(hash)\n}\n\n/**\n * Convert the given base58 encoded string to a multihash.\n *\n * @param {string|Buffer} hash\n * @returns {Buffer}\n */\nexports.fromB58String = function fromB58String (hash) {\n  let encoded = hash\n  if (Buffer.isBuffer(hash)) {\n    encoded = hash.toString()\n  }\n\n  return Buffer.from(bs58.decode(encoded))\n}\n\n/**\n * Decode a hash from the given multihash.\n *\n * @param {Buffer} buf\n * @returns {{code: number, name: string, length: number, digest: Buffer}} result\n */\nexports.decode = function decode (buf) {\n  if (!(Buffer.isBuffer(buf))) {\n    throw new Error('multihash must be a Buffer')\n  }\n\n  if (buf.length < 3) {\n    throw new Error('multihash too short. must be > 3 bytes.')\n  }\n\n  let code = varint.decode(buf)\n  if (!exports.isValidCode(code)) {\n    throw new Error(`multihash unknown function code: 0x${code.toString(16)}`)\n  }\n  buf = buf.slice(varint.decode.bytes)\n\n  let len = varint.decode(buf)\n  if (len < 1) {\n    throw new Error(`multihash invalid length: 0x${len.toString(16)}`)\n  }\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== len) {\n    throw new Error(`multihash length inconsistent: 0x${buf.toString('hex')}`)\n  }\n\n  return {\n    code: code,\n    name: cs.codes[code],\n    length: len,\n    digest: buf\n  }\n}\n\n/**\n *  Encode a hash digest along with the specified function code.\n *\n * > **Note:** the length is derived from the length of the digest itself.\n *\n * @param {Buffer} digest\n * @param {string|number} code\n * @param {number} [length]\n * @returns {Buffer}\n */\nexports.encode = function encode (digest, code, length) {\n  if (!digest || !code) {\n    throw new Error('multihash encode requires at least two args: digest, code')\n  }\n\n  // ensure it's a hashfunction code.\n  const hashfn = exports.coerceCode(code)\n\n  if (!(Buffer.isBuffer(digest))) {\n    throw new Error('digest should be a Buffer')\n  }\n\n  if (length == null) {\n    length = digest.length\n  }\n\n  if (length && digest.length !== length) {\n    throw new Error('digest length should be equal to specified length.')\n  }\n\n  return Buffer.concat([\n    Buffer.from(varint.encode(hashfn)),\n    Buffer.from(varint.encode(length)),\n    digest\n  ])\n}\n\n/**\n * Converts a hash function name into the matching code.\n * If passed a number it will return the number if it's a valid code.\n * @param {string|number} name\n * @returns {number}\n */\nexports.coerceCode = function coerceCode (name) {\n  let code = name\n\n  if (typeof name === 'string') {\n    if (!cs.names[name]) {\n      throw new Error(`Unrecognized hash function named: ${name}`)\n    }\n    code = cs.names[name]\n  }\n\n  if (typeof code !== 'number') {\n    throw new Error(`Hash function code should be a number. Got: ${code}`)\n  }\n\n  if (!cs.codes[code] && !exports.isAppCode(code)) {\n    throw new Error(`Unrecognized function code: ${code}`)\n  }\n\n  return code\n}\n\n/**\n * Checks wether a code is part of the app range\n *\n * @param {number} code\n * @returns {boolean}\n */\nexports.isAppCode = function appCode (code) {\n  return code > 0 && code < 0x10\n}\n\n/**\n * Checks whether a multihash code is valid.\n *\n * @param {number} code\n * @returns {boolean}\n */\nexports.isValidCode = function validCode (code) {\n  if (exports.isAppCode(code)) {\n    return true\n  }\n\n  if (cs.codes[code]) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Check if the given buffer is a valid multihash. Throws an error if it is not valid.\n *\n * @param {Buffer} multihash\n * @returns {undefined}\n * @throws {Error}\n */\nfunction validate (multihash) {\n  exports.decode(multihash) // throws if bad.\n}\nexports.validate = validate\n\n/**\n * Returns a prefix from a valid multihash. Throws an error if it is not valid.\n *\n * @param {Buffer} multihash\n * @returns {undefined}\n * @throws {Error}\n */\nexports.prefix = function prefix (multihash) {\n  validate(multihash)\n\n  return multihash.slice(0, 2)\n}\n","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n","'use strict'\n\n// spec and table at: https://github.com/multiformats/multicodec\n\nexports = module.exports\n\n// Miscellaneous\nexports['raw'] = Buffer.from('55', 'hex')\n\n// bases encodings\nexports['base1'] = Buffer.from('01', 'hex')\nexports['base2'] = Buffer.from('00', 'hex')\nexports['base8'] = Buffer.from('07', 'hex')\nexports['base10'] = Buffer.from('09', 'hex')\n\n// Serialization formats\nexports['cbor'] = Buffer.from('51', 'hex')\nexports['protobuf'] = Buffer.from('50', 'hex')\nexports['rlp'] = Buffer.from('60', 'hex')\nexports['bencode'] = Buffer.from('63', 'hex')\n\n// Multiformats\nexports['multicodec'] = Buffer.from('30', 'hex')\nexports['multihash'] = Buffer.from('31', 'hex')\nexports['multiaddr'] = Buffer.from('32', 'hex')\nexports['multibase'] = Buffer.from('33', 'hex')\nexports['md4'] = Buffer.from('d4', 'hex')\nexports['md5'] = Buffer.from('d5', 'hex')\n\n// multihashes\nexports['sha1'] = Buffer.from('11', 'hex')\nexports['sha2-256'] = Buffer.from('12', 'hex')\nexports['sha2-512'] = Buffer.from('13', 'hex')\nexports['dbl-sha2-256'] = Buffer.from('56', 'hex')\nexports['sha3-224'] = Buffer.from('17', 'hex')\nexports['sha3-256'] = Buffer.from('16', 'hex')\nexports['sha3-384'] = Buffer.from('15', 'hex')\nexports['sha3-512'] = Buffer.from('14', 'hex')\nexports['shake-128'] = Buffer.from('18', 'hex')\nexports['shake-256'] = Buffer.from('19', 'hex')\nexports['keccak-224'] = Buffer.from('1a', 'hex')\nexports['keccak-256'] = Buffer.from('1b', 'hex')\nexports['keccak-384'] = Buffer.from('1c', 'hex')\nexports['keccak-512'] = Buffer.from('1d', 'hex')\nexports['murmur3'] = Buffer.from('22', 'hex')\nexports['blake2b-8'] = Buffer.from('b201', 'hex')\nexports['blake2b-16'] = Buffer.from('b202', 'hex')\nexports['blake2b-24'] = Buffer.from('b203', 'hex')\nexports['blake2b-32'] = Buffer.from('b204', 'hex')\nexports['blake2b-40'] = Buffer.from('b205', 'hex')\nexports['blake2b-48'] = Buffer.from('b206', 'hex')\nexports['blake2b-56'] = Buffer.from('b207', 'hex')\nexports['blake2b-64'] = Buffer.from('b208', 'hex')\nexports['blake2b-72'] = Buffer.from('b209', 'hex')\nexports['blake2b-80'] = Buffer.from('b20a', 'hex')\nexports['blake2b-88'] = Buffer.from('b20b', 'hex')\nexports['blake2b-96'] = Buffer.from('b20c', 'hex')\nexports['blake2b-104'] = Buffer.from('b20d', 'hex')\nexports['blake2b-112'] = Buffer.from('b20e', 'hex')\nexports['blake2b-120'] = Buffer.from('b20f', 'hex')\nexports['blake2b-128'] = Buffer.from('b210', 'hex')\nexports['blake2b-136'] = Buffer.from('b211', 'hex')\nexports['blake2b-144'] = Buffer.from('b212', 'hex')\nexports['blake2b-152'] = Buffer.from('b213', 'hex')\nexports['blake2b-160'] = Buffer.from('b214', 'hex')\nexports['blake2b-168'] = Buffer.from('b215', 'hex')\nexports['blake2b-176'] = Buffer.from('b216', 'hex')\nexports['blake2b-184'] = Buffer.from('b217', 'hex')\nexports['blake2b-192'] = Buffer.from('b218', 'hex')\nexports['blake2b-200'] = Buffer.from('b219', 'hex')\nexports['blake2b-208'] = Buffer.from('b21a', 'hex')\nexports['blake2b-216'] = Buffer.from('b21b', 'hex')\nexports['blake2b-224'] = Buffer.from('b21c', 'hex')\nexports['blake2b-232'] = Buffer.from('b21d', 'hex')\nexports['blake2b-240'] = Buffer.from('b21e', 'hex')\nexports['blake2b-248'] = Buffer.from('b21f', 'hex')\nexports['blake2b-256'] = Buffer.from('b220', 'hex')\nexports['blake2b-264'] = Buffer.from('b221', 'hex')\nexports['blake2b-272'] = Buffer.from('b222', 'hex')\nexports['blake2b-280'] = Buffer.from('b223', 'hex')\nexports['blake2b-288'] = Buffer.from('b224', 'hex')\nexports['blake2b-296'] = Buffer.from('b225', 'hex')\nexports['blake2b-304'] = Buffer.from('b226', 'hex')\nexports['blake2b-312'] = Buffer.from('b227', 'hex')\nexports['blake2b-320'] = Buffer.from('b228', 'hex')\nexports['blake2b-328'] = Buffer.from('b229', 'hex')\nexports['blake2b-336'] = Buffer.from('b22a', 'hex')\nexports['blake2b-344'] = Buffer.from('b22b', 'hex')\nexports['blake2b-352'] = Buffer.from('b22c', 'hex')\nexports['blake2b-360'] = Buffer.from('b22d', 'hex')\nexports['blake2b-368'] = Buffer.from('b22e', 'hex')\nexports['blake2b-376'] = Buffer.from('b22f', 'hex')\nexports['blake2b-384'] = Buffer.from('b230', 'hex')\nexports['blake2b-392'] = Buffer.from('b231', 'hex')\nexports['blake2b-400'] = Buffer.from('b232', 'hex')\nexports['blake2b-408'] = Buffer.from('b233', 'hex')\nexports['blake2b-416'] = Buffer.from('b234', 'hex')\nexports['blake2b-424'] = Buffer.from('b235', 'hex')\nexports['blake2b-432'] = Buffer.from('b236', 'hex')\nexports['blake2b-440'] = Buffer.from('b237', 'hex')\nexports['blake2b-448'] = Buffer.from('b238', 'hex')\nexports['blake2b-456'] = Buffer.from('b239', 'hex')\nexports['blake2b-464'] = Buffer.from('b23a', 'hex')\nexports['blake2b-472'] = Buffer.from('b23b', 'hex')\nexports['blake2b-480'] = Buffer.from('b23c', 'hex')\nexports['blake2b-488'] = Buffer.from('b23d', 'hex')\nexports['blake2b-496'] = Buffer.from('b23e', 'hex')\nexports['blake2b-504'] = Buffer.from('b23f', 'hex')\nexports['blake2b-512'] = Buffer.from('b240', 'hex')\nexports['blake2s-8'] = Buffer.from('b241', 'hex')\nexports['blake2s-16'] = Buffer.from('b242', 'hex')\nexports['blake2s-24'] = Buffer.from('b243', 'hex')\nexports['blake2s-32'] = Buffer.from('b244', 'hex')\nexports['blake2s-40'] = Buffer.from('b245', 'hex')\nexports['blake2s-48'] = Buffer.from('b246', 'hex')\nexports['blake2s-56'] = Buffer.from('b247', 'hex')\nexports['blake2s-64'] = Buffer.from('b248', 'hex')\nexports['blake2s-72'] = Buffer.from('b249', 'hex')\nexports['blake2s-80'] = Buffer.from('b24a', 'hex')\nexports['blake2s-88'] = Buffer.from('b24b', 'hex')\nexports['blake2s-96'] = Buffer.from('b24c', 'hex')\nexports['blake2s-104'] = Buffer.from('b24d', 'hex')\nexports['blake2s-112'] = Buffer.from('b24e', 'hex')\nexports['blake2s-120'] = Buffer.from('b24f', 'hex')\nexports['blake2s-128'] = Buffer.from('b250', 'hex')\nexports['blake2s-136'] = Buffer.from('b251', 'hex')\nexports['blake2s-144'] = Buffer.from('b252', 'hex')\nexports['blake2s-152'] = Buffer.from('b253', 'hex')\nexports['blake2s-160'] = Buffer.from('b254', 'hex')\nexports['blake2s-168'] = Buffer.from('b255', 'hex')\nexports['blake2s-176'] = Buffer.from('b256', 'hex')\nexports['blake2s-184'] = Buffer.from('b257', 'hex')\nexports['blake2s-192'] = Buffer.from('b258', 'hex')\nexports['blake2s-200'] = Buffer.from('b259', 'hex')\nexports['blake2s-208'] = Buffer.from('b25a', 'hex')\nexports['blake2s-216'] = Buffer.from('b25b', 'hex')\nexports['blake2s-224'] = Buffer.from('b25c', 'hex')\nexports['blake2s-232'] = Buffer.from('b25d', 'hex')\nexports['blake2s-240'] = Buffer.from('b25e', 'hex')\nexports['blake2s-248'] = Buffer.from('b25f', 'hex')\nexports['blake2s-256'] = Buffer.from('b260', 'hex')\nexports['skein256-8'] = Buffer.from('b301', 'hex')\nexports['skein256-16'] = Buffer.from('b302', 'hex')\nexports['skein256-24'] = Buffer.from('b303', 'hex')\nexports['skein256-32'] = Buffer.from('b304', 'hex')\nexports['skein256-40'] = Buffer.from('b305', 'hex')\nexports['skein256-48'] = Buffer.from('b306', 'hex')\nexports['skein256-56'] = Buffer.from('b307', 'hex')\nexports['skein256-64'] = Buffer.from('b308', 'hex')\nexports['skein256-72'] = Buffer.from('b309', 'hex')\nexports['skein256-80'] = Buffer.from('b30a', 'hex')\nexports['skein256-88'] = Buffer.from('b30b', 'hex')\nexports['skein256-96'] = Buffer.from('b30c', 'hex')\nexports['skein256-104'] = Buffer.from('b30d', 'hex')\nexports['skein256-112'] = Buffer.from('b30e', 'hex')\nexports['skein256-120'] = Buffer.from('b30f', 'hex')\nexports['skein256-128'] = Buffer.from('b310', 'hex')\nexports['skein256-136'] = Buffer.from('b311', 'hex')\nexports['skein256-144'] = Buffer.from('b312', 'hex')\nexports['skein256-152'] = Buffer.from('b313', 'hex')\nexports['skein256-160'] = Buffer.from('b314', 'hex')\nexports['skein256-168'] = Buffer.from('b315', 'hex')\nexports['skein256-176'] = Buffer.from('b316', 'hex')\nexports['skein256-184'] = Buffer.from('b317', 'hex')\nexports['skein256-192'] = Buffer.from('b318', 'hex')\nexports['skein256-200'] = Buffer.from('b319', 'hex')\nexports['skein256-208'] = Buffer.from('b31a', 'hex')\nexports['skein256-216'] = Buffer.from('b31b', 'hex')\nexports['skein256-224'] = Buffer.from('b31c', 'hex')\nexports['skein256-232'] = Buffer.from('b31d', 'hex')\nexports['skein256-240'] = Buffer.from('b31e', 'hex')\nexports['skein256-248'] = Buffer.from('b31f', 'hex')\nexports['skein256-256'] = Buffer.from('b320', 'hex')\nexports['skein512-8'] = Buffer.from('b321', 'hex')\nexports['skein512-16'] = Buffer.from('b322', 'hex')\nexports['skein512-24'] = Buffer.from('b323', 'hex')\nexports['skein512-32'] = Buffer.from('b324', 'hex')\nexports['skein512-40'] = Buffer.from('b325', 'hex')\nexports['skein512-48'] = Buffer.from('b326', 'hex')\nexports['skein512-56'] = Buffer.from('b327', 'hex')\nexports['skein512-64'] = Buffer.from('b328', 'hex')\nexports['skein512-72'] = Buffer.from('b329', 'hex')\nexports['skein512-80'] = Buffer.from('b32a', 'hex')\nexports['skein512-88'] = Buffer.from('b32b', 'hex')\nexports['skein512-96'] = Buffer.from('b32c', 'hex')\nexports['skein512-104'] = Buffer.from('b32d', 'hex')\nexports['skein512-112'] = Buffer.from('b32e', 'hex')\nexports['skein512-120'] = Buffer.from('b32f', 'hex')\nexports['skein512-128'] = Buffer.from('b330', 'hex')\nexports['skein512-136'] = Buffer.from('b331', 'hex')\nexports['skein512-144'] = Buffer.from('b332', 'hex')\nexports['skein512-152'] = Buffer.from('b333', 'hex')\nexports['skein512-160'] = Buffer.from('b334', 'hex')\nexports['skein512-168'] = Buffer.from('b335', 'hex')\nexports['skein512-176'] = Buffer.from('b336', 'hex')\nexports['skein512-184'] = Buffer.from('b337', 'hex')\nexports['skein512-192'] = Buffer.from('b338', 'hex')\nexports['skein512-200'] = Buffer.from('b339', 'hex')\nexports['skein512-208'] = Buffer.from('b33a', 'hex')\nexports['skein512-216'] = Buffer.from('b33b', 'hex')\nexports['skein512-224'] = Buffer.from('b33c', 'hex')\nexports['skein512-232'] = Buffer.from('b33d', 'hex')\nexports['skein512-240'] = Buffer.from('b33e', 'hex')\nexports['skein512-248'] = Buffer.from('b33f', 'hex')\nexports['skein512-256'] = Buffer.from('b340', 'hex')\nexports['skein512-264'] = Buffer.from('b341', 'hex')\nexports['skein512-272'] = Buffer.from('b342', 'hex')\nexports['skein512-280'] = Buffer.from('b343', 'hex')\nexports['skein512-288'] = Buffer.from('b344', 'hex')\nexports['skein512-296'] = Buffer.from('b345', 'hex')\nexports['skein512-304'] = Buffer.from('b346', 'hex')\nexports['skein512-312'] = Buffer.from('b347', 'hex')\nexports['skein512-320'] = Buffer.from('b348', 'hex')\nexports['skein512-328'] = Buffer.from('b349', 'hex')\nexports['skein512-336'] = Buffer.from('b34a', 'hex')\nexports['skein512-344'] = Buffer.from('b34b', 'hex')\nexports['skein512-352'] = Buffer.from('b34c', 'hex')\nexports['skein512-360'] = Buffer.from('b34d', 'hex')\nexports['skein512-368'] = Buffer.from('b34e', 'hex')\nexports['skein512-376'] = Buffer.from('b34f', 'hex')\nexports['skein512-384'] = Buffer.from('b350', 'hex')\nexports['skein512-392'] = Buffer.from('b351', 'hex')\nexports['skein512-400'] = Buffer.from('b352', 'hex')\nexports['skein512-408'] = Buffer.from('b353', 'hex')\nexports['skein512-416'] = Buffer.from('b354', 'hex')\nexports['skein512-424'] = Buffer.from('b355', 'hex')\nexports['skein512-432'] = Buffer.from('b356', 'hex')\nexports['skein512-440'] = Buffer.from('b357', 'hex')\nexports['skein512-448'] = Buffer.from('b358', 'hex')\nexports['skein512-456'] = Buffer.from('b359', 'hex')\nexports['skein512-464'] = Buffer.from('b35a', 'hex')\nexports['skein512-472'] = Buffer.from('b35b', 'hex')\nexports['skein512-480'] = Buffer.from('b35c', 'hex')\nexports['skein512-488'] = Buffer.from('b35d', 'hex')\nexports['skein512-496'] = Buffer.from('b35e', 'hex')\nexports['skein512-504'] = Buffer.from('b35f', 'hex')\nexports['skein512-512'] = Buffer.from('b360', 'hex')\nexports['skein1024-8'] = Buffer.from('b361', 'hex')\nexports['skein1024-16'] = Buffer.from('b362', 'hex')\nexports['skein1024-24'] = Buffer.from('b363', 'hex')\nexports['skein1024-32'] = Buffer.from('b364', 'hex')\nexports['skein1024-40'] = Buffer.from('b365', 'hex')\nexports['skein1024-48'] = Buffer.from('b366', 'hex')\nexports['skein1024-56'] = Buffer.from('b367', 'hex')\nexports['skein1024-64'] = Buffer.from('b368', 'hex')\nexports['skein1024-72'] = Buffer.from('b369', 'hex')\nexports['skein1024-80'] = Buffer.from('b36a', 'hex')\nexports['skein1024-88'] = Buffer.from('b36b', 'hex')\nexports['skein1024-96'] = Buffer.from('b36c', 'hex')\nexports['skein1024-104'] = Buffer.from('b36d', 'hex')\nexports['skein1024-112'] = Buffer.from('b36e', 'hex')\nexports['skein1024-120'] = Buffer.from('b36f', 'hex')\nexports['skein1024-128'] = Buffer.from('b370', 'hex')\nexports['skein1024-136'] = Buffer.from('b371', 'hex')\nexports['skein1024-144'] = Buffer.from('b372', 'hex')\nexports['skein1024-152'] = Buffer.from('b373', 'hex')\nexports['skein1024-160'] = Buffer.from('b374', 'hex')\nexports['skein1024-168'] = Buffer.from('b375', 'hex')\nexports['skein1024-176'] = Buffer.from('b376', 'hex')\nexports['skein1024-184'] = Buffer.from('b377', 'hex')\nexports['skein1024-192'] = Buffer.from('b378', 'hex')\nexports['skein1024-200'] = Buffer.from('b379', 'hex')\nexports['skein1024-208'] = Buffer.from('b37a', 'hex')\nexports['skein1024-216'] = Buffer.from('b37b', 'hex')\nexports['skein1024-224'] = Buffer.from('b37c', 'hex')\nexports['skein1024-232'] = Buffer.from('b37d', 'hex')\nexports['skein1024-240'] = Buffer.from('b37e', 'hex')\nexports['skein1024-248'] = Buffer.from('b37f', 'hex')\nexports['skein1024-256'] = Buffer.from('b380', 'hex')\nexports['skein1024-264'] = Buffer.from('b381', 'hex')\nexports['skein1024-272'] = Buffer.from('b382', 'hex')\nexports['skein1024-280'] = Buffer.from('b383', 'hex')\nexports['skein1024-288'] = Buffer.from('b384', 'hex')\nexports['skein1024-296'] = Buffer.from('b385', 'hex')\nexports['skein1024-304'] = Buffer.from('b386', 'hex')\nexports['skein1024-312'] = Buffer.from('b387', 'hex')\nexports['skein1024-320'] = Buffer.from('b388', 'hex')\nexports['skein1024-328'] = Buffer.from('b389', 'hex')\nexports['skein1024-336'] = Buffer.from('b38a', 'hex')\nexports['skein1024-344'] = Buffer.from('b38b', 'hex')\nexports['skein1024-352'] = Buffer.from('b38c', 'hex')\nexports['skein1024-360'] = Buffer.from('b38d', 'hex')\nexports['skein1024-368'] = Buffer.from('b38e', 'hex')\nexports['skein1024-376'] = Buffer.from('b38f', 'hex')\nexports['skein1024-384'] = Buffer.from('b390', 'hex')\nexports['skein1024-392'] = Buffer.from('b391', 'hex')\nexports['skein1024-400'] = Buffer.from('b392', 'hex')\nexports['skein1024-408'] = Buffer.from('b393', 'hex')\nexports['skein1024-416'] = Buffer.from('b394', 'hex')\nexports['skein1024-424'] = Buffer.from('b395', 'hex')\nexports['skein1024-432'] = Buffer.from('b396', 'hex')\nexports['skein1024-440'] = Buffer.from('b397', 'hex')\nexports['skein1024-448'] = Buffer.from('b398', 'hex')\nexports['skein1024-456'] = Buffer.from('b399', 'hex')\nexports['skein1024-464'] = Buffer.from('b39a', 'hex')\nexports['skein1024-472'] = Buffer.from('b39b', 'hex')\nexports['skein1024-480'] = Buffer.from('b39c', 'hex')\nexports['skein1024-488'] = Buffer.from('b39d', 'hex')\nexports['skein1024-496'] = Buffer.from('b39e', 'hex')\nexports['skein1024-504'] = Buffer.from('b39f', 'hex')\nexports['skein1024-512'] = Buffer.from('b3a0', 'hex')\nexports['skein1024-520'] = Buffer.from('b3a1', 'hex')\nexports['skein1024-528'] = Buffer.from('b3a2', 'hex')\nexports['skein1024-536'] = Buffer.from('b3a3', 'hex')\nexports['skein1024-544'] = Buffer.from('b3a4', 'hex')\nexports['skein1024-552'] = Buffer.from('b3a5', 'hex')\nexports['skein1024-560'] = Buffer.from('b3a6', 'hex')\nexports['skein1024-568'] = Buffer.from('b3a7', 'hex')\nexports['skein1024-576'] = Buffer.from('b3a8', 'hex')\nexports['skein1024-584'] = Buffer.from('b3a9', 'hex')\nexports['skein1024-592'] = Buffer.from('b3aa', 'hex')\nexports['skein1024-600'] = Buffer.from('b3ab', 'hex')\nexports['skein1024-608'] = Buffer.from('b3ac', 'hex')\nexports['skein1024-616'] = Buffer.from('b3ad', 'hex')\nexports['skein1024-624'] = Buffer.from('b3ae', 'hex')\nexports['skein1024-632'] = Buffer.from('b3af', 'hex')\nexports['skein1024-640'] = Buffer.from('b3b0', 'hex')\nexports['skein1024-648'] = Buffer.from('b3b1', 'hex')\nexports['skein1024-656'] = Buffer.from('b3b2', 'hex')\nexports['skein1024-664'] = Buffer.from('b3b3', 'hex')\nexports['skein1024-672'] = Buffer.from('b3b4', 'hex')\nexports['skein1024-680'] = Buffer.from('b3b5', 'hex')\nexports['skein1024-688'] = Buffer.from('b3b6', 'hex')\nexports['skein1024-696'] = Buffer.from('b3b7', 'hex')\nexports['skein1024-704'] = Buffer.from('b3b8', 'hex')\nexports['skein1024-712'] = Buffer.from('b3b9', 'hex')\nexports['skein1024-720'] = Buffer.from('b3ba', 'hex')\nexports['skein1024-728'] = Buffer.from('b3bb', 'hex')\nexports['skein1024-736'] = Buffer.from('b3bc', 'hex')\nexports['skein1024-744'] = Buffer.from('b3bd', 'hex')\nexports['skein1024-752'] = Buffer.from('b3be', 'hex')\nexports['skein1024-760'] = Buffer.from('b3bf', 'hex')\nexports['skein1024-768'] = Buffer.from('b3c0', 'hex')\nexports['skein1024-776'] = Buffer.from('b3c1', 'hex')\nexports['skein1024-784'] = Buffer.from('b3c2', 'hex')\nexports['skein1024-792'] = Buffer.from('b3c3', 'hex')\nexports['skein1024-800'] = Buffer.from('b3c4', 'hex')\nexports['skein1024-808'] = Buffer.from('b3c5', 'hex')\nexports['skein1024-816'] = Buffer.from('b3c6', 'hex')\nexports['skein1024-824'] = Buffer.from('b3c7', 'hex')\nexports['skein1024-832'] = Buffer.from('b3c8', 'hex')\nexports['skein1024-840'] = Buffer.from('b3c9', 'hex')\nexports['skein1024-848'] = Buffer.from('b3ca', 'hex')\nexports['skein1024-856'] = Buffer.from('b3cb', 'hex')\nexports['skein1024-864'] = Buffer.from('b3cc', 'hex')\nexports['skein1024-872'] = Buffer.from('b3cd', 'hex')\nexports['skein1024-880'] = Buffer.from('b3ce', 'hex')\nexports['skein1024-888'] = Buffer.from('b3cf', 'hex')\nexports['skein1024-896'] = Buffer.from('b3d0', 'hex')\nexports['skein1024-904'] = Buffer.from('b3d1', 'hex')\nexports['skein1024-912'] = Buffer.from('b3d2', 'hex')\nexports['skein1024-920'] = Buffer.from('b3d3', 'hex')\nexports['skein1024-928'] = Buffer.from('b3d4', 'hex')\nexports['skein1024-936'] = Buffer.from('b3d5', 'hex')\nexports['skein1024-944'] = Buffer.from('b3d6', 'hex')\nexports['skein1024-952'] = Buffer.from('b3d7', 'hex')\nexports['skein1024-960'] = Buffer.from('b3d8', 'hex')\nexports['skein1024-968'] = Buffer.from('b3d9', 'hex')\nexports['skein1024-976'] = Buffer.from('b3da', 'hex')\nexports['skein1024-984'] = Buffer.from('b3db', 'hex')\nexports['skein1024-992'] = Buffer.from('b3dc', 'hex')\nexports['skein1024-1000'] = Buffer.from('b3dd', 'hex')\nexports['skein1024-1008'] = Buffer.from('b3de', 'hex')\nexports['skein1024-1016'] = Buffer.from('b3df', 'hex')\nexports['skein1024-1024'] = Buffer.from('b3e0', 'hex')\n\n// multiaddrs\nexports['ip4'] = Buffer.from('04', 'hex')\nexports['ip6'] = Buffer.from('29', 'hex')\nexports['tcp'] = Buffer.from('06', 'hex')\nexports['udp'] = Buffer.from('0111', 'hex')\nexports['dccp'] = Buffer.from('21', 'hex')\nexports['sctp'] = Buffer.from('84', 'hex')\nexports['udt'] = Buffer.from('012d', 'hex')\nexports['utp'] = Buffer.from('012e', 'hex')\nexports['ipfs'] = Buffer.from('01a5', 'hex')\nexports['http'] = Buffer.from('01e0', 'hex')\nexports['https'] = Buffer.from('01bb', 'hex')\nexports['quic'] = Buffer.from('01cc', 'hex')\nexports['ws'] = Buffer.from('01dd', 'hex')\nexports['onion'] = Buffer.from('01bc', 'hex')\nexports['p2p-circuit'] = Buffer.from('0122', 'hex')\n\n// archiving formats\n\n// image formats\n\n// video formats\n\n// VCS formats\nexports['git-raw'] = Buffer.from('78', 'hex')\n\n// IPLD formats\nexports['dag-pb'] = Buffer.from('70', 'hex')\nexports['dag-cbor'] = Buffer.from('71', 'hex')\nexports['git-raw'] = Buffer.from('78', 'hex')\nexports['eth-block'] = Buffer.from('90', 'hex')\nexports['eth-block-list'] = Buffer.from('91', 'hex')\nexports['eth-tx-trie'] = Buffer.from('92', 'hex')\nexports['eth-tx'] = Buffer.from('93', 'hex')\nexports['eth-tx-receipt-trie'] = Buffer.from('94', 'hex')\nexports['eth-tx-receipt'] = Buffer.from('95', 'hex')\nexports['eth-state-trie'] = Buffer.from('96', 'hex')\nexports['eth-account-snapshot'] = Buffer.from('97', 'hex')\nexports['eth-storage-trie'] = Buffer.from('98', 'hex')\n\nexports['bitcoin-block'] = Buffer.from('b0', 'hex')\nexports['bitcoin-tx'] = Buffer.from('b1', 'hex')\nexports['zcash-block'] = Buffer.from('c0', 'hex')\nexports['zcash-tx'] = Buffer.from('c1', 'hex')\nexports['stellar-block'] = Buffer.from('d0', 'hex')\nexports['stellar-tx'] = Buffer.from('d1', 'hex')\n\nexports['torrent-info'] = Buffer.from('7b', 'hex')\nexports['torrent-file'] = Buffer.from('7c', 'hex')\nexports['ed25519-pub'] = Buffer.from('ed', 'hex')\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","// base-x encoding\n// Forked from https://github.com/cryptocoinjs/bs58\n// Originally written by Mike Hearn for BitcoinJ\n// Copyright (c) 2011 Google Inc\n// Ported to JavaScript by Stefan Thomas\n// Merged Buffer refactorings from base58-native by Stephen Pair\n// Copyright (c) 2013 BitPay Inc\n\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function base (ALPHABET) {\n  var ALPHABET_MAP = {}\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n\n  // pre-compute lookup table\n  for (var z = 0; z < ALPHABET.length; z++) {\n    var x = ALPHABET.charAt(z)\n\n    if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n    ALPHABET_MAP[x] = z\n  }\n\n  function encode (source) {\n    if (source.length === 0) return ''\n\n    var digits = [0]\n    for (var i = 0; i < source.length; ++i) {\n      for (var j = 0, carry = source[i]; j < digits.length; ++j) {\n        carry += digits[j] << 8\n        digits[j] = carry % BASE\n        carry = (carry / BASE) | 0\n      }\n\n      while (carry > 0) {\n        digits.push(carry % BASE)\n        carry = (carry / BASE) | 0\n      }\n    }\n\n    var string = ''\n\n    // deal with leading zeros\n    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) string += LEADER\n    // convert digits to a string\n    for (var q = digits.length - 1; q >= 0; --q) string += ALPHABET[digits[q]]\n\n    return string\n  }\n\n  function decodeUnsafe (string) {\n    if (typeof string !== 'string') throw new TypeError('Expected String')\n    if (string.length === 0) return Buffer.allocUnsafe(0)\n\n    var bytes = [0]\n    for (var i = 0; i < string.length; i++) {\n      var value = ALPHABET_MAP[string[i]]\n      if (value === undefined) return\n\n      for (var j = 0, carry = value; j < bytes.length; ++j) {\n        carry += bytes[j] * BASE\n        bytes[j] = carry & 0xff\n        carry >>= 8\n      }\n\n      while (carry > 0) {\n        bytes.push(carry & 0xff)\n        carry >>= 8\n      }\n    }\n\n    // deal with leading zeros\n    for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {\n      bytes.push(0)\n    }\n\n    return Buffer.from(bytes.reverse())\n  }\n\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) return buffer\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n","/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n * @module Multibase\n */\n'use strict'\n\nconst constants = require('./constants')\n\nexports = module.exports = multibase\nexports.encode = encode\nexports.decode = decode\nexports.isEncoded = isEncoded\n\nconst errNotSupported = new Error('Unsupported encoding')\n\n/**\n * Create a new buffer with the multibase varint+code.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be prefixed with multibase.\n * @memberof Multibase\n * @returns {Buffer}\n */\nfunction multibase (nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded buffer')\n  }\n  const base = getBase(nameOrCode)\n  const codeBuf = Buffer.from(base.code)\n\n  const name = base.name\n  validEncode(name, buf)\n  return Buffer.concat([codeBuf, buf])\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be encoded.\n * @returns {Buffer}\n * @memberof Multibase\n */\nfunction encode (nameOrCode, buf) {\n  const base = getBase(nameOrCode)\n  const name = base.name\n\n  return multibase(name, Buffer.from(base.encode(buf)))\n}\n\n/**\n *\n * Takes a buffer or string encoded with multibase header\n * decodes it and returns an object with the decoded buffer\n * and the encoded type { base: <name>, data: <buffer> }\n *\n * from @theobat : This is not what the multibase.spec.js test is waiting for,\n * hence the return decodeObject.data\n *\n * @param {Buffer|string} bufOrString\n * @returns {Object} result\n * @returns {string} result.base\n * @returns {Buffer} result.data\n * @memberof Multibase\n *\n */\nfunction decode (bufOrString) {\n  if (Buffer.isBuffer(bufOrString)) {\n    bufOrString = bufOrString.toString()\n  }\n\n  const code = bufOrString.substring(0, 1)\n  bufOrString = bufOrString.substring(1, bufOrString.length)\n\n  if (typeof bufOrString === 'string') {\n    bufOrString = Buffer.from(bufOrString)\n  }\n\n  const base = getBase(code)\n\n  const decodeObject = {\n    base: base.name,\n    data: Buffer.from(base.decode(bufOrString.toString()))\n  }\n  return decodeObject.data\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Buffer|string} bufOrString\n * @returns {boolean}\n * @memberof Multibase\n */\nfunction isEncoded (bufOrString) {\n  if (Buffer.isBuffer(bufOrString)) {\n    bufOrString = bufOrString.toString()\n  }\n\n  const code = bufOrString.substring(0, 1)\n  try {\n    const base = getBase(code)\n    return base.name\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * @param {string} name\n * @param {Buffer} buf\n * @private\n * @returns {undefined}\n */\nfunction validEncode (name, buf) {\n  const base = getBase(name)\n  base.decode(buf.toString())\n}\n\nfunction getBase (nameOrCode) {\n  let base\n\n  if (constants.names[nameOrCode]) {\n    base = constants.names[nameOrCode]\n  } else if (constants.codes[nameOrCode]) {\n    base = constants.codes[nameOrCode]\n  } else {\n    throw errNotSupported\n  }\n\n  if (!base.isImplemented()) {\n    throw new Error('Base ' + nameOrCode + ' is not implemented yet')\n  }\n\n  return base\n}\n","'use strict'\nconst baseTable = require('./base-table')\nconst varintBufferEncode = require('./util').varintBufferEncode\n\n// this creates a map for codecName -> codeVarintBuffer\n\nconst varintTable = {}\nmodule.exports = varintTable\n\nfor (let encodingName in baseTable) {\n  let code = baseTable[encodingName]\n  varintTable[encodingName] = varintBufferEncode(code)\n}\n","'use strict'\nconst varint = require('varint')\n\nmodule.exports = {\n  numberToBuffer,\n  bufferToNumber,\n  varintBufferEncode,\n  varintBufferDecode\n}\n\nfunction bufferToNumber (buf) {\n  return parseInt(buf.toString('hex'), 16)\n}\n\nfunction numberToBuffer (num) {\n  let hexString = num.toString(16)\n  if (hexString.length % 2 === 1) {\n    hexString = '0' + hexString\n  }\n  return Buffer.from(hexString, 'hex')\n}\n\nfunction varintBufferEncode (input) {\n  return Buffer.from(varint.encode(bufferToNumber(input)))\n}\n\nfunction varintBufferDecode (input) {\n  return numberToBuffer(varint.decode(input))\n}\n","'use strict'\n\nconst base58 = require('bs58')\nconst multihash = require('multihashes')\nconst multibase = require('multibase')\nconst CID = require('cids')\n\nconst urlPattern = /^https?:\\/\\/[^/]+\\/(ip(f|n)s)\\/((\\w+).*)/\nconst pathPattern = /^\\/(ip(f|n)s)\\/((\\w+).*)/\nconst defaultProtocolMatch = 1\nconst defaultHashMath = 4\n\nconst fqdnPattern = /^https?:\\/\\/([^/]+)\\.(ip(?:f|n)s)\\.[^/]+/\nconst fqdnHashMatch = 1\nconst fqdnProtocolMatch = 2\n\nfunction isMultihash (hash) {\n  const formatted = convertToString(hash)\n  try {\n    const buffer = Buffer.from(base58.decode(formatted))\n    multihash.decode(buffer)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isMultibase (hash) {\n  try {\n    return multibase.isEncoded(hash)\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isCID (hash) {\n  try {\n    return CID.isCID(new CID(hash))\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isIpfs (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false\n  }\n\n  let hash = match[hashMatch]\n\n  if (hash && pattern === fqdnPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase()\n  }\n\n  return isCID(hash)\n}\n\nfunction isIpns (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false\n  }\n\n  if (hashMatch && pattern === fqdnPattern) {\n    let hash = match[hashMatch]\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase()\n    return isCID(hash)\n  }\n\n  return true\n}\n\nfunction convertToString (input) {\n  if (Buffer.isBuffer(input)) {\n    return base58.encode(input)\n  }\n\n  if (typeof input === 'string') {\n    return input\n  }\n\n  return false\n}\n\nconst ipfsSubdomain = (url) => isIpfs(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch)\nconst ipnsSubdomain = (url) => isIpns(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch)\n\nmodule.exports = {\n  multihash: isMultihash,\n  cid: isCID,\n  base32cid: (cid) => (isMultibase(cid) === 'base32' && isCID(cid)),\n  ipfsSubdomain: ipfsSubdomain,\n  ipnsSubdomain: ipnsSubdomain,\n  subdomain: (url) => (ipfsSubdomain(url) || ipnsSubdomain(url)),\n  subdomainPattern: fqdnPattern,\n  ipfsUrl: (url) => isIpfs(url, urlPattern),\n  ipnsUrl: (url) => isIpns(url, urlPattern),\n  url: (url) => (isIpfs(url, urlPattern) || isIpns(url, urlPattern)),\n  urlPattern: urlPattern,\n  ipfsPath: (path) => isIpfs(path, pathPattern),\n  ipnsPath: (path) => isIpns(path, pathPattern),\n  path: (path) => (isIpfs(path, pathPattern) || isIpns(path, pathPattern)),\n  pathPattern: pathPattern,\n  urlOrPath: (x) => (isIpfs(x, urlPattern) || isIpns(x, urlPattern) || isIpfs(x, pathPattern) || isIpns(x, pathPattern))\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","/* eslint quote-props: off */\n/* eslint key-spacing: off */\n'use strict'\n\nexports.names = Object.freeze({\n  'sha1':       0x11,\n  'sha2-256':   0x12,\n  'sha2-512':   0x13,\n  'dbl-sha2-256': 0x56,\n  'sha3-224':   0x17,\n  'sha3-256':   0x16,\n  'sha3-384':   0x15,\n  'sha3-512':   0x14,\n  'shake-128':  0x18,\n  'shake-256':  0x19,\n  'keccak-224': 0x1A,\n  'keccak-256': 0x1B,\n  'keccak-384': 0x1C,\n  'keccak-512': 0x1D,\n  'murmur3-128': 0x22,\n  'murmur3-32':  0x23,\n  'blake2b-8':   0xb201,\n  'blake2b-16':  0xb202,\n  'blake2b-24':  0xb203,\n  'blake2b-32':  0xb204,\n  'blake2b-40':  0xb205,\n  'blake2b-48':  0xb206,\n  'blake2b-56':  0xb207,\n  'blake2b-64':  0xb208,\n  'blake2b-72':  0xb209,\n  'blake2b-80':  0xb20a,\n  'blake2b-88':  0xb20b,\n  'blake2b-96':  0xb20c,\n  'blake2b-104': 0xb20d,\n  'blake2b-112': 0xb20e,\n  'blake2b-120': 0xb20f,\n  'blake2b-128': 0xb210,\n  'blake2b-136': 0xb211,\n  'blake2b-144': 0xb212,\n  'blake2b-152': 0xb213,\n  'blake2b-160': 0xb214,\n  'blake2b-168': 0xb215,\n  'blake2b-176': 0xb216,\n  'blake2b-184': 0xb217,\n  'blake2b-192': 0xb218,\n  'blake2b-200': 0xb219,\n  'blake2b-208': 0xb21a,\n  'blake2b-216': 0xb21b,\n  'blake2b-224': 0xb21c,\n  'blake2b-232': 0xb21d,\n  'blake2b-240': 0xb21e,\n  'blake2b-248': 0xb21f,\n  'blake2b-256': 0xb220,\n  'blake2b-264': 0xb221,\n  'blake2b-272': 0xb222,\n  'blake2b-280': 0xb223,\n  'blake2b-288': 0xb224,\n  'blake2b-296': 0xb225,\n  'blake2b-304': 0xb226,\n  'blake2b-312': 0xb227,\n  'blake2b-320': 0xb228,\n  'blake2b-328': 0xb229,\n  'blake2b-336': 0xb22a,\n  'blake2b-344': 0xb22b,\n  'blake2b-352': 0xb22c,\n  'blake2b-360': 0xb22d,\n  'blake2b-368': 0xb22e,\n  'blake2b-376': 0xb22f,\n  'blake2b-384': 0xb230,\n  'blake2b-392': 0xb231,\n  'blake2b-400': 0xb232,\n  'blake2b-408': 0xb233,\n  'blake2b-416': 0xb234,\n  'blake2b-424': 0xb235,\n  'blake2b-432': 0xb236,\n  'blake2b-440': 0xb237,\n  'blake2b-448': 0xb238,\n  'blake2b-456': 0xb239,\n  'blake2b-464': 0xb23a,\n  'blake2b-472': 0xb23b,\n  'blake2b-480': 0xb23c,\n  'blake2b-488': 0xb23d,\n  'blake2b-496': 0xb23e,\n  'blake2b-504': 0xb23f,\n  'blake2b-512': 0xb240,\n  'blake2s-8':   0xb241,\n  'blake2s-16':  0xb242,\n  'blake2s-24':  0xb243,\n  'blake2s-32':  0xb244,\n  'blake2s-40':  0xb245,\n  'blake2s-48':  0xb246,\n  'blake2s-56':  0xb247,\n  'blake2s-64':  0xb248,\n  'blake2s-72':  0xb249,\n  'blake2s-80':  0xb24a,\n  'blake2s-88':  0xb24b,\n  'blake2s-96':  0xb24c,\n  'blake2s-104': 0xb24d,\n  'blake2s-112': 0xb24e,\n  'blake2s-120': 0xb24f,\n  'blake2s-128': 0xb250,\n  'blake2s-136': 0xb251,\n  'blake2s-144': 0xb252,\n  'blake2s-152': 0xb253,\n  'blake2s-160': 0xb254,\n  'blake2s-168': 0xb255,\n  'blake2s-176': 0xb256,\n  'blake2s-184': 0xb257,\n  'blake2s-192': 0xb258,\n  'blake2s-200': 0xb259,\n  'blake2s-208': 0xb25a,\n  'blake2s-216': 0xb25b,\n  'blake2s-224': 0xb25c,\n  'blake2s-232': 0xb25d,\n  'blake2s-240': 0xb25e,\n  'blake2s-248': 0xb25f,\n  'blake2s-256': 0xb260,\n  'Skein256-8': 0xb301,\n  'Skein256-16': 0xb302,\n  'Skein256-24': 0xb303,\n  'Skein256-32': 0xb304,\n  'Skein256-40': 0xb305,\n  'Skein256-48': 0xb306,\n  'Skein256-56': 0xb307,\n  'Skein256-64': 0xb308,\n  'Skein256-72': 0xb309,\n  'Skein256-80': 0xb30a,\n  'Skein256-88': 0xb30b,\n  'Skein256-96': 0xb30c,\n  'Skein256-104': 0xb30d,\n  'Skein256-112': 0xb30e,\n  'Skein256-120': 0xb30f,\n  'Skein256-128': 0xb310,\n  'Skein256-136': 0xb311,\n  'Skein256-144': 0xb312,\n  'Skein256-152': 0xb313,\n  'Skein256-160': 0xb314,\n  'Skein256-168': 0xb315,\n  'Skein256-176': 0xb316,\n  'Skein256-184': 0xb317,\n  'Skein256-192': 0xb318,\n  'Skein256-200': 0xb319,\n  'Skein256-208': 0xb31a,\n  'Skein256-216': 0xb31b,\n  'Skein256-224': 0xb31c,\n  'Skein256-232': 0xb31d,\n  'Skein256-240': 0xb31e,\n  'Skein256-248': 0xb31f,\n  'Skein256-256': 0xb320,\n  'Skein512-8': 0xb321,\n  'Skein512-16': 0xb322,\n  'Skein512-24': 0xb323,\n  'Skein512-32': 0xb324,\n  'Skein512-40': 0xb325,\n  'Skein512-48': 0xb326,\n  'Skein512-56': 0xb327,\n  'Skein512-64': 0xb328,\n  'Skein512-72': 0xb329,\n  'Skein512-80': 0xb32a,\n  'Skein512-88': 0xb32b,\n  'Skein512-96': 0xb32c,\n  'Skein512-104': 0xb32d,\n  'Skein512-112': 0xb32e,\n  'Skein512-120': 0xb32f,\n  'Skein512-128': 0xb330,\n  'Skein512-136': 0xb331,\n  'Skein512-144': 0xb332,\n  'Skein512-152': 0xb333,\n  'Skein512-160': 0xb334,\n  'Skein512-168': 0xb335,\n  'Skein512-176': 0xb336,\n  'Skein512-184': 0xb337,\n  'Skein512-192': 0xb338,\n  'Skein512-200': 0xb339,\n  'Skein512-208': 0xb33a,\n  'Skein512-216': 0xb33b,\n  'Skein512-224': 0xb33c,\n  'Skein512-232': 0xb33d,\n  'Skein512-240': 0xb33e,\n  'Skein512-248': 0xb33f,\n  'Skein512-256': 0xb340,\n  'Skein512-264': 0xb341,\n  'Skein512-272': 0xb342,\n  'Skein512-280': 0xb343,\n  'Skein512-288': 0xb344,\n  'Skein512-296': 0xb345,\n  'Skein512-304': 0xb346,\n  'Skein512-312': 0xb347,\n  'Skein512-320': 0xb348,\n  'Skein512-328': 0xb349,\n  'Skein512-336': 0xb34a,\n  'Skein512-344': 0xb34b,\n  'Skein512-352': 0xb34c,\n  'Skein512-360': 0xb34d,\n  'Skein512-368': 0xb34e,\n  'Skein512-376': 0xb34f,\n  'Skein512-384': 0xb350,\n  'Skein512-392': 0xb351,\n  'Skein512-400': 0xb352,\n  'Skein512-408': 0xb353,\n  'Skein512-416': 0xb354,\n  'Skein512-424': 0xb355,\n  'Skein512-432': 0xb356,\n  'Skein512-440': 0xb357,\n  'Skein512-448': 0xb358,\n  'Skein512-456': 0xb359,\n  'Skein512-464': 0xb35a,\n  'Skein512-472': 0xb35b,\n  'Skein512-480': 0xb35c,\n  'Skein512-488': 0xb35d,\n  'Skein512-496': 0xb35e,\n  'Skein512-504': 0xb35f,\n  'Skein512-512': 0xb360,\n  'Skein1024-8': 0xb361,\n  'Skein1024-16': 0xb362,\n  'Skein1024-24': 0xb363,\n  'Skein1024-32': 0xb364,\n  'Skein1024-40': 0xb365,\n  'Skein1024-48': 0xb366,\n  'Skein1024-56': 0xb367,\n  'Skein1024-64': 0xb368,\n  'Skein1024-72': 0xb369,\n  'Skein1024-80': 0xb36a,\n  'Skein1024-88': 0xb36b,\n  'Skein1024-96': 0xb36c,\n  'Skein1024-104': 0xb36d,\n  'Skein1024-112': 0xb36e,\n  'Skein1024-120': 0xb36f,\n  'Skein1024-128': 0xb370,\n  'Skein1024-136': 0xb371,\n  'Skein1024-144': 0xb372,\n  'Skein1024-152': 0xb373,\n  'Skein1024-160': 0xb374,\n  'Skein1024-168': 0xb375,\n  'Skein1024-176': 0xb376,\n  'Skein1024-184': 0xb377,\n  'Skein1024-192': 0xb378,\n  'Skein1024-200': 0xb379,\n  'Skein1024-208': 0xb37a,\n  'Skein1024-216': 0xb37b,\n  'Skein1024-224': 0xb37c,\n  'Skein1024-232': 0xb37d,\n  'Skein1024-240': 0xb37e,\n  'Skein1024-248': 0xb37f,\n  'Skein1024-256': 0xb380,\n  'Skein1024-264': 0xb381,\n  'Skein1024-272': 0xb382,\n  'Skein1024-280': 0xb383,\n  'Skein1024-288': 0xb384,\n  'Skein1024-296': 0xb385,\n  'Skein1024-304': 0xb386,\n  'Skein1024-312': 0xb387,\n  'Skein1024-320': 0xb388,\n  'Skein1024-328': 0xb389,\n  'Skein1024-336': 0xb38a,\n  'Skein1024-344': 0xb38b,\n  'Skein1024-352': 0xb38c,\n  'Skein1024-360': 0xb38d,\n  'Skein1024-368': 0xb38e,\n  'Skein1024-376': 0xb38f,\n  'Skein1024-384': 0xb390,\n  'Skein1024-392': 0xb391,\n  'Skein1024-400': 0xb392,\n  'Skein1024-408': 0xb393,\n  'Skein1024-416': 0xb394,\n  'Skein1024-424': 0xb395,\n  'Skein1024-432': 0xb396,\n  'Skein1024-440': 0xb397,\n  'Skein1024-448': 0xb398,\n  'Skein1024-456': 0xb399,\n  'Skein1024-464': 0xb39a,\n  'Skein1024-472': 0xb39b,\n  'Skein1024-480': 0xb39c,\n  'Skein1024-488': 0xb39d,\n  'Skein1024-496': 0xb39e,\n  'Skein1024-504': 0xb39f,\n  'Skein1024-512': 0xb3a0,\n  'Skein1024-520': 0xb3a1,\n  'Skein1024-528': 0xb3a2,\n  'Skein1024-536': 0xb3a3,\n  'Skein1024-544': 0xb3a4,\n  'Skein1024-552': 0xb3a5,\n  'Skein1024-560': 0xb3a6,\n  'Skein1024-568': 0xb3a7,\n  'Skein1024-576': 0xb3a8,\n  'Skein1024-584': 0xb3a9,\n  'Skein1024-592': 0xb3aa,\n  'Skein1024-600': 0xb3ab,\n  'Skein1024-608': 0xb3ac,\n  'Skein1024-616': 0xb3ad,\n  'Skein1024-624': 0xb3ae,\n  'Skein1024-632': 0xb3af,\n  'Skein1024-640': 0xb3b0,\n  'Skein1024-648': 0xb3b1,\n  'Skein1024-656': 0xb3b2,\n  'Skein1024-664': 0xb3b3,\n  'Skein1024-672': 0xb3b4,\n  'Skein1024-680': 0xb3b5,\n  'Skein1024-688': 0xb3b6,\n  'Skein1024-696': 0xb3b7,\n  'Skein1024-704': 0xb3b8,\n  'Skein1024-712': 0xb3b9,\n  'Skein1024-720': 0xb3ba,\n  'Skein1024-728': 0xb3bb,\n  'Skein1024-736': 0xb3bc,\n  'Skein1024-744': 0xb3bd,\n  'Skein1024-752': 0xb3be,\n  'Skein1024-760': 0xb3bf,\n  'Skein1024-768': 0xb3c0,\n  'Skein1024-776': 0xb3c1,\n  'Skein1024-784': 0xb3c2,\n  'Skein1024-792': 0xb3c3,\n  'Skein1024-800': 0xb3c4,\n  'Skein1024-808': 0xb3c5,\n  'Skein1024-816': 0xb3c6,\n  'Skein1024-824': 0xb3c7,\n  'Skein1024-832': 0xb3c8,\n  'Skein1024-840': 0xb3c9,\n  'Skein1024-848': 0xb3ca,\n  'Skein1024-856': 0xb3cb,\n  'Skein1024-864': 0xb3cc,\n  'Skein1024-872': 0xb3cd,\n  'Skein1024-880': 0xb3ce,\n  'Skein1024-888': 0xb3cf,\n  'Skein1024-896': 0xb3d0,\n  'Skein1024-904': 0xb3d1,\n  'Skein1024-912': 0xb3d2,\n  'Skein1024-920': 0xb3d3,\n  'Skein1024-928': 0xb3d4,\n  'Skein1024-936': 0xb3d5,\n  'Skein1024-944': 0xb3d6,\n  'Skein1024-952': 0xb3d7,\n  'Skein1024-960': 0xb3d8,\n  'Skein1024-968': 0xb3d9,\n  'Skein1024-976': 0xb3da,\n  'Skein1024-984': 0xb3db,\n  'Skein1024-992': 0xb3dc,\n  'Skein1024-1000': 0xb3dd,\n  'Skein1024-1008': 0xb3de,\n  'Skein1024-1016': 0xb3df,\n  'Skein1024-1024': 0xb3e0\n})\n\nexports.codes = Object.freeze({\n  0x11: 'sha1',\n  0x12: 'sha2-256',\n  0x13: 'sha2-512',\n  0x56: 'dbl-sha2-256',\n  0x17: 'sha3-224',\n  0x16: 'sha3-256',\n  0x15: 'sha3-384',\n  0x14: 'sha3-512',\n  0x18: 'shake-128',\n  0x19: 'shake-256',\n  0x1A: 'keccak-224',\n  0x1B: 'keccak-256',\n  0x1C: 'keccak-384',\n  0x1D: 'keccak-512',\n  0x22: 'murmur3-128',\n  0x23: 'murmur3-32',\n\n  // blake2\n  0xb201: 'blake2b-8',\n  0xb202: 'blake2b-16',\n  0xb203: 'blake2b-24',\n  0xb204: 'blake2b-32',\n  0xb205: 'blake2b-40',\n  0xb206: 'blake2b-48',\n  0xb207: 'blake2b-56',\n  0xb208: 'blake2b-64',\n  0xb209: 'blake2b-72',\n  0xb20a: 'blake2b-80',\n  0xb20b: 'blake2b-88',\n  0xb20c: 'blake2b-96',\n  0xb20d: 'blake2b-104',\n  0xb20e: 'blake2b-112',\n  0xb20f: 'blake2b-120',\n  0xb210: 'blake2b-128',\n  0xb211: 'blake2b-136',\n  0xb212: 'blake2b-144',\n  0xb213: 'blake2b-152',\n  0xb214: 'blake2b-160',\n  0xb215: 'blake2b-168',\n  0xb216: 'blake2b-176',\n  0xb217: 'blake2b-184',\n  0xb218: 'blake2b-192',\n  0xb219: 'blake2b-200',\n  0xb21a: 'blake2b-208',\n  0xb21b: 'blake2b-216',\n  0xb21c: 'blake2b-224',\n  0xb21d: 'blake2b-232',\n  0xb21e: 'blake2b-240',\n  0xb21f: 'blake2b-248',\n  0xb220: 'blake2b-256',\n  0xb221: 'blake2b-264',\n  0xb222: 'blake2b-272',\n  0xb223: 'blake2b-280',\n  0xb224: 'blake2b-288',\n  0xb225: 'blake2b-296',\n  0xb226: 'blake2b-304',\n  0xb227: 'blake2b-312',\n  0xb228: 'blake2b-320',\n  0xb229: 'blake2b-328',\n  0xb22a: 'blake2b-336',\n  0xb22b: 'blake2b-344',\n  0xb22c: 'blake2b-352',\n  0xb22d: 'blake2b-360',\n  0xb22e: 'blake2b-368',\n  0xb22f: 'blake2b-376',\n  0xb230: 'blake2b-384',\n  0xb231: 'blake2b-392',\n  0xb232: 'blake2b-400',\n  0xb233: 'blake2b-408',\n  0xb234: 'blake2b-416',\n  0xb235: 'blake2b-424',\n  0xb236: 'blake2b-432',\n  0xb237: 'blake2b-440',\n  0xb238: 'blake2b-448',\n  0xb239: 'blake2b-456',\n  0xb23a: 'blake2b-464',\n  0xb23b: 'blake2b-472',\n  0xb23c: 'blake2b-480',\n  0xb23d: 'blake2b-488',\n  0xb23e: 'blake2b-496',\n  0xb23f: 'blake2b-504',\n  0xb240: 'blake2b-512',\n  0xb241: 'blake2s-8',\n  0xb242: 'blake2s-16',\n  0xb243: 'blake2s-24',\n  0xb244: 'blake2s-32',\n  0xb245: 'blake2s-40',\n  0xb246: 'blake2s-48',\n  0xb247: 'blake2s-56',\n  0xb248: 'blake2s-64',\n  0xb249: 'blake2s-72',\n  0xb24a: 'blake2s-80',\n  0xb24b: 'blake2s-88',\n  0xb24c: 'blake2s-96',\n  0xb24d: 'blake2s-104',\n  0xb24e: 'blake2s-112',\n  0xb24f: 'blake2s-120',\n  0xb250: 'blake2s-128',\n  0xb251: 'blake2s-136',\n  0xb252: 'blake2s-144',\n  0xb253: 'blake2s-152',\n  0xb254: 'blake2s-160',\n  0xb255: 'blake2s-168',\n  0xb256: 'blake2s-176',\n  0xb257: 'blake2s-184',\n  0xb258: 'blake2s-192',\n  0xb259: 'blake2s-200',\n  0xb25a: 'blake2s-208',\n  0xb25b: 'blake2s-216',\n  0xb25c: 'blake2s-224',\n  0xb25d: 'blake2s-232',\n  0xb25e: 'blake2s-240',\n  0xb25f: 'blake2s-248',\n  0xb260: 'blake2s-256',\n\n  // skein\n  0xb301: 'Skein256-8',\n  0xb302: 'Skein256-16',\n  0xb303: 'Skein256-24',\n  0xb304: 'Skein256-32',\n  0xb305: 'Skein256-40',\n  0xb306: 'Skein256-48',\n  0xb307: 'Skein256-56',\n  0xb308: 'Skein256-64',\n  0xb309: 'Skein256-72',\n  0xb30a: 'Skein256-80',\n  0xb30b: 'Skein256-88',\n  0xb30c: 'Skein256-96',\n  0xb30d: 'Skein256-104',\n  0xb30e: 'Skein256-112',\n  0xb30f: 'Skein256-120',\n  0xb310: 'Skein256-128',\n  0xb311: 'Skein256-136',\n  0xb312: 'Skein256-144',\n  0xb313: 'Skein256-152',\n  0xb314: 'Skein256-160',\n  0xb315: 'Skein256-168',\n  0xb316: 'Skein256-176',\n  0xb317: 'Skein256-184',\n  0xb318: 'Skein256-192',\n  0xb319: 'Skein256-200',\n  0xb31a: 'Skein256-208',\n  0xb31b: 'Skein256-216',\n  0xb31c: 'Skein256-224',\n  0xb31d: 'Skein256-232',\n  0xb31e: 'Skein256-240',\n  0xb31f: 'Skein256-248',\n  0xb320: 'Skein256-256',\n  0xb321: 'Skein512-8',\n  0xb322: 'Skein512-16',\n  0xb323: 'Skein512-24',\n  0xb324: 'Skein512-32',\n  0xb325: 'Skein512-40',\n  0xb326: 'Skein512-48',\n  0xb327: 'Skein512-56',\n  0xb328: 'Skein512-64',\n  0xb329: 'Skein512-72',\n  0xb32a: 'Skein512-80',\n  0xb32b: 'Skein512-88',\n  0xb32c: 'Skein512-96',\n  0xb32d: 'Skein512-104',\n  0xb32e: 'Skein512-112',\n  0xb32f: 'Skein512-120',\n  0xb330: 'Skein512-128',\n  0xb331: 'Skein512-136',\n  0xb332: 'Skein512-144',\n  0xb333: 'Skein512-152',\n  0xb334: 'Skein512-160',\n  0xb335: 'Skein512-168',\n  0xb336: 'Skein512-176',\n  0xb337: 'Skein512-184',\n  0xb338: 'Skein512-192',\n  0xb339: 'Skein512-200',\n  0xb33a: 'Skein512-208',\n  0xb33b: 'Skein512-216',\n  0xb33c: 'Skein512-224',\n  0xb33d: 'Skein512-232',\n  0xb33e: 'Skein512-240',\n  0xb33f: 'Skein512-248',\n  0xb340: 'Skein512-256',\n  0xb341: 'Skein512-264',\n  0xb342: 'Skein512-272',\n  0xb343: 'Skein512-280',\n  0xb344: 'Skein512-288',\n  0xb345: 'Skein512-296',\n  0xb346: 'Skein512-304',\n  0xb347: 'Skein512-312',\n  0xb348: 'Skein512-320',\n  0xb349: 'Skein512-328',\n  0xb34a: 'Skein512-336',\n  0xb34b: 'Skein512-344',\n  0xb34c: 'Skein512-352',\n  0xb34d: 'Skein512-360',\n  0xb34e: 'Skein512-368',\n  0xb34f: 'Skein512-376',\n  0xb350: 'Skein512-384',\n  0xb351: 'Skein512-392',\n  0xb352: 'Skein512-400',\n  0xb353: 'Skein512-408',\n  0xb354: 'Skein512-416',\n  0xb355: 'Skein512-424',\n  0xb356: 'Skein512-432',\n  0xb357: 'Skein512-440',\n  0xb358: 'Skein512-448',\n  0xb359: 'Skein512-456',\n  0xb35a: 'Skein512-464',\n  0xb35b: 'Skein512-472',\n  0xb35c: 'Skein512-480',\n  0xb35d: 'Skein512-488',\n  0xb35e: 'Skein512-496',\n  0xb35f: 'Skein512-504',\n  0xb360: 'Skein512-512',\n  0xb361: 'Skein1024-8',\n  0xb362: 'Skein1024-16',\n  0xb363: 'Skein1024-24',\n  0xb364: 'Skein1024-32',\n  0xb365: 'Skein1024-40',\n  0xb366: 'Skein1024-48',\n  0xb367: 'Skein1024-56',\n  0xb368: 'Skein1024-64',\n  0xb369: 'Skein1024-72',\n  0xb36a: 'Skein1024-80',\n  0xb36b: 'Skein1024-88',\n  0xb36c: 'Skein1024-96',\n  0xb36d: 'Skein1024-104',\n  0xb36e: 'Skein1024-112',\n  0xb36f: 'Skein1024-120',\n  0xb370: 'Skein1024-128',\n  0xb371: 'Skein1024-136',\n  0xb372: 'Skein1024-144',\n  0xb373: 'Skein1024-152',\n  0xb374: 'Skein1024-160',\n  0xb375: 'Skein1024-168',\n  0xb376: 'Skein1024-176',\n  0xb377: 'Skein1024-184',\n  0xb378: 'Skein1024-192',\n  0xb379: 'Skein1024-200',\n  0xb37a: 'Skein1024-208',\n  0xb37b: 'Skein1024-216',\n  0xb37c: 'Skein1024-224',\n  0xb37d: 'Skein1024-232',\n  0xb37e: 'Skein1024-240',\n  0xb37f: 'Skein1024-248',\n  0xb380: 'Skein1024-256',\n  0xb381: 'Skein1024-264',\n  0xb382: 'Skein1024-272',\n  0xb383: 'Skein1024-280',\n  0xb384: 'Skein1024-288',\n  0xb385: 'Skein1024-296',\n  0xb386: 'Skein1024-304',\n  0xb387: 'Skein1024-312',\n  0xb388: 'Skein1024-320',\n  0xb389: 'Skein1024-328',\n  0xb38a: 'Skein1024-336',\n  0xb38b: 'Skein1024-344',\n  0xb38c: 'Skein1024-352',\n  0xb38d: 'Skein1024-360',\n  0xb38e: 'Skein1024-368',\n  0xb38f: 'Skein1024-376',\n  0xb390: 'Skein1024-384',\n  0xb391: 'Skein1024-392',\n  0xb392: 'Skein1024-400',\n  0xb393: 'Skein1024-408',\n  0xb394: 'Skein1024-416',\n  0xb395: 'Skein1024-424',\n  0xb396: 'Skein1024-432',\n  0xb397: 'Skein1024-440',\n  0xb398: 'Skein1024-448',\n  0xb399: 'Skein1024-456',\n  0xb39a: 'Skein1024-464',\n  0xb39b: 'Skein1024-472',\n  0xb39c: 'Skein1024-480',\n  0xb39d: 'Skein1024-488',\n  0xb39e: 'Skein1024-496',\n  0xb39f: 'Skein1024-504',\n  0xb3a0: 'Skein1024-512',\n  0xb3a1: 'Skein1024-520',\n  0xb3a2: 'Skein1024-528',\n  0xb3a3: 'Skein1024-536',\n  0xb3a4: 'Skein1024-544',\n  0xb3a5: 'Skein1024-552',\n  0xb3a6: 'Skein1024-560',\n  0xb3a7: 'Skein1024-568',\n  0xb3a8: 'Skein1024-576',\n  0xb3a9: 'Skein1024-584',\n  0xb3aa: 'Skein1024-592',\n  0xb3ab: 'Skein1024-600',\n  0xb3ac: 'Skein1024-608',\n  0xb3ad: 'Skein1024-616',\n  0xb3ae: 'Skein1024-624',\n  0xb3af: 'Skein1024-632',\n  0xb3b0: 'Skein1024-640',\n  0xb3b1: 'Skein1024-648',\n  0xb3b2: 'Skein1024-656',\n  0xb3b3: 'Skein1024-664',\n  0xb3b4: 'Skein1024-672',\n  0xb3b5: 'Skein1024-680',\n  0xb3b6: 'Skein1024-688',\n  0xb3b7: 'Skein1024-696',\n  0xb3b8: 'Skein1024-704',\n  0xb3b9: 'Skein1024-712',\n  0xb3ba: 'Skein1024-720',\n  0xb3bb: 'Skein1024-728',\n  0xb3bc: 'Skein1024-736',\n  0xb3bd: 'Skein1024-744',\n  0xb3be: 'Skein1024-752',\n  0xb3bf: 'Skein1024-760',\n  0xb3c0: 'Skein1024-768',\n  0xb3c1: 'Skein1024-776',\n  0xb3c2: 'Skein1024-784',\n  0xb3c3: 'Skein1024-792',\n  0xb3c4: 'Skein1024-800',\n  0xb3c5: 'Skein1024-808',\n  0xb3c6: 'Skein1024-816',\n  0xb3c7: 'Skein1024-824',\n  0xb3c8: 'Skein1024-832',\n  0xb3c9: 'Skein1024-840',\n  0xb3ca: 'Skein1024-848',\n  0xb3cb: 'Skein1024-856',\n  0xb3cc: 'Skein1024-864',\n  0xb3cd: 'Skein1024-872',\n  0xb3ce: 'Skein1024-880',\n  0xb3cf: 'Skein1024-888',\n  0xb3d0: 'Skein1024-896',\n  0xb3d1: 'Skein1024-904',\n  0xb3d2: 'Skein1024-912',\n  0xb3d3: 'Skein1024-920',\n  0xb3d4: 'Skein1024-928',\n  0xb3d5: 'Skein1024-936',\n  0xb3d6: 'Skein1024-944',\n  0xb3d7: 'Skein1024-952',\n  0xb3d8: 'Skein1024-960',\n  0xb3d9: 'Skein1024-968',\n  0xb3da: 'Skein1024-976',\n  0xb3db: 'Skein1024-984',\n  0xb3dc: 'Skein1024-992',\n  0xb3dd: 'Skein1024-1000',\n  0xb3de: 'Skein1024-1008',\n  0xb3df: 'Skein1024-1016',\n  0xb3e0: 'Skein1024-1024'\n})\n\nexports.defaultLengths = Object.freeze({\n  0x11: 20,\n  0x12: 32,\n  0x13: 64,\n  0x56: 32,\n  0x17: 28,\n  0x16: 32,\n  0x15: 48,\n  0x14: 64,\n  0x18: 32,\n  0x19: 64,\n  0x1A: 28,\n  0x1B: 32,\n  0x1C: 48,\n  0x1D: 64,\n  0x22: 32,\n\n  0xb201: 0x01,\n  0xb202: 0x02,\n  0xb203: 0x03,\n  0xb204: 0x04,\n  0xb205: 0x05,\n  0xb206: 0x06,\n  0xb207: 0x07,\n  0xb208: 0x08,\n  0xb209: 0x09,\n  0xb20a: 0x0a,\n  0xb20b: 0x0b,\n  0xb20c: 0x0c,\n  0xb20d: 0x0d,\n  0xb20e: 0x0e,\n  0xb20f: 0x0f,\n  0xb210: 0x10,\n  0xb211: 0x11,\n  0xb212: 0x12,\n  0xb213: 0x13,\n  0xb214: 0x14,\n  0xb215: 0x15,\n  0xb216: 0x16,\n  0xb217: 0x17,\n  0xb218: 0x18,\n  0xb219: 0x19,\n  0xb21a: 0x1a,\n  0xb21b: 0x1b,\n  0xb21c: 0x1c,\n  0xb21d: 0x1d,\n  0xb21e: 0x1e,\n  0xb21f: 0x1f,\n  0xb220: 0x20,\n  0xb221: 0x21,\n  0xb222: 0x22,\n  0xb223: 0x23,\n  0xb224: 0x24,\n  0xb225: 0x25,\n  0xb226: 0x26,\n  0xb227: 0x27,\n  0xb228: 0x28,\n  0xb229: 0x29,\n  0xb22a: 0x2a,\n  0xb22b: 0x2b,\n  0xb22c: 0x2c,\n  0xb22d: 0x2d,\n  0xb22e: 0x2e,\n  0xb22f: 0x2f,\n  0xb230: 0x30,\n  0xb231: 0x31,\n  0xb232: 0x32,\n  0xb233: 0x33,\n  0xb234: 0x34,\n  0xb235: 0x35,\n  0xb236: 0x36,\n  0xb237: 0x37,\n  0xb238: 0x38,\n  0xb239: 0x39,\n  0xb23a: 0x3a,\n  0xb23b: 0x3b,\n  0xb23c: 0x3c,\n  0xb23d: 0x3d,\n  0xb23e: 0x3e,\n  0xb23f: 0x3f,\n  0xb240: 0x40,\n  0xb241: 0x01,\n  0xb242: 0x02,\n  0xb243: 0x03,\n  0xb244: 0x04,\n  0xb245: 0x05,\n  0xb246: 0x06,\n  0xb247: 0x07,\n  0xb248: 0x08,\n  0xb249: 0x09,\n  0xb24a: 0x0a,\n  0xb24b: 0x0b,\n  0xb24c: 0x0c,\n  0xb24d: 0x0d,\n  0xb24e: 0x0e,\n  0xb24f: 0x0f,\n  0xb250: 0x10,\n  0xb251: 0x11,\n  0xb252: 0x12,\n  0xb253: 0x13,\n  0xb254: 0x14,\n  0xb255: 0x15,\n  0xb256: 0x16,\n  0xb257: 0x17,\n  0xb258: 0x18,\n  0xb259: 0x19,\n  0xb25a: 0x1a,\n  0xb25b: 0x1b,\n  0xb25c: 0x1c,\n  0xb25d: 0x1d,\n  0xb25e: 0x1e,\n  0xb25f: 0x1f,\n  0xb260: 0x20,\n  0xb301: 0x01,\n  0xb302: 0x02,\n  0xb303: 0x03,\n  0xb304: 0x04,\n  0xb305: 0x05,\n  0xb306: 0x06,\n  0xb307: 0x07,\n  0xb308: 0x08,\n  0xb309: 0x09,\n  0xb30a: 0x0a,\n  0xb30b: 0x0b,\n  0xb30c: 0x0c,\n  0xb30d: 0x0d,\n  0xb30e: 0x0e,\n  0xb30f: 0x0f,\n  0xb310: 0x10,\n  0xb311: 0x11,\n  0xb312: 0x12,\n  0xb313: 0x13,\n  0xb314: 0x14,\n  0xb315: 0x15,\n  0xb316: 0x16,\n  0xb317: 0x17,\n  0xb318: 0x18,\n  0xb319: 0x19,\n  0xb31a: 0x1a,\n  0xb31b: 0x1b,\n  0xb31c: 0x1c,\n  0xb31d: 0x1d,\n  0xb31e: 0x1e,\n  0xb31f: 0x1f,\n  0xb320: 0x20,\n  0xb321: 0x01,\n  0xb322: 0x02,\n  0xb323: 0x03,\n  0xb324: 0x04,\n  0xb325: 0x05,\n  0xb326: 0x06,\n  0xb327: 0x07,\n  0xb328: 0x08,\n  0xb329: 0x09,\n  0xb32a: 0x0a,\n  0xb32b: 0x0b,\n  0xb32c: 0x0c,\n  0xb32d: 0x0d,\n  0xb32e: 0x0e,\n  0xb32f: 0x0f,\n  0xb330: 0x10,\n  0xb331: 0x11,\n  0xb332: 0x12,\n  0xb333: 0x13,\n  0xb334: 0x14,\n  0xb335: 0x15,\n  0xb336: 0x16,\n  0xb337: 0x17,\n  0xb338: 0x18,\n  0xb339: 0x19,\n  0xb33a: 0x1a,\n  0xb33b: 0x1b,\n  0xb33c: 0x1c,\n  0xb33d: 0x1d,\n  0xb33e: 0x1e,\n  0xb33f: 0x1f,\n  0xb340: 0x20,\n  0xb341: 0x21,\n  0xb342: 0x22,\n  0xb343: 0x23,\n  0xb344: 0x24,\n  0xb345: 0x25,\n  0xb346: 0x26,\n  0xb347: 0x27,\n  0xb348: 0x28,\n  0xb349: 0x29,\n  0xb34a: 0x2a,\n  0xb34b: 0x2b,\n  0xb34c: 0x2c,\n  0xb34d: 0x2d,\n  0xb34e: 0x2e,\n  0xb34f: 0x2f,\n  0xb350: 0x30,\n  0xb351: 0x31,\n  0xb352: 0x32,\n  0xb353: 0x33,\n  0xb354: 0x34,\n  0xb355: 0x35,\n  0xb356: 0x36,\n  0xb357: 0x37,\n  0xb358: 0x38,\n  0xb359: 0x39,\n  0xb35a: 0x3a,\n  0xb35b: 0x3b,\n  0xb35c: 0x3c,\n  0xb35d: 0x3d,\n  0xb35e: 0x3e,\n  0xb35f: 0x3f,\n  0xb360: 0x40,\n  0xb361: 0x01,\n  0xb362: 0x02,\n  0xb363: 0x03,\n  0xb364: 0x04,\n  0xb365: 0x05,\n  0xb366: 0x06,\n  0xb367: 0x07,\n  0xb368: 0x08,\n  0xb369: 0x09,\n  0xb36a: 0x0a,\n  0xb36b: 0x0b,\n  0xb36c: 0x0c,\n  0xb36d: 0x0d,\n  0xb36e: 0x0e,\n  0xb36f: 0x0f,\n  0xb370: 0x10,\n  0xb371: 0x11,\n  0xb372: 0x12,\n  0xb373: 0x13,\n  0xb374: 0x14,\n  0xb375: 0x15,\n  0xb376: 0x16,\n  0xb377: 0x17,\n  0xb378: 0x18,\n  0xb379: 0x19,\n  0xb37a: 0x1a,\n  0xb37b: 0x1b,\n  0xb37c: 0x1c,\n  0xb37d: 0x1d,\n  0xb37e: 0x1e,\n  0xb37f: 0x1f,\n  0xb380: 0x20,\n  0xb381: 0x21,\n  0xb382: 0x22,\n  0xb383: 0x23,\n  0xb384: 0x24,\n  0xb385: 0x25,\n  0xb386: 0x26,\n  0xb387: 0x27,\n  0xb388: 0x28,\n  0xb389: 0x29,\n  0xb38a: 0x2a,\n  0xb38b: 0x2b,\n  0xb38c: 0x2c,\n  0xb38d: 0x2d,\n  0xb38e: 0x2e,\n  0xb38f: 0x2f,\n  0xb390: 0x30,\n  0xb391: 0x31,\n  0xb392: 0x32,\n  0xb393: 0x33,\n  0xb394: 0x34,\n  0xb395: 0x35,\n  0xb396: 0x36,\n  0xb397: 0x37,\n  0xb398: 0x38,\n  0xb399: 0x39,\n  0xb39a: 0x3a,\n  0xb39b: 0x3b,\n  0xb39c: 0x3c,\n  0xb39d: 0x3d,\n  0xb39e: 0x3e,\n  0xb39f: 0x3f,\n  0xb3a0: 0x40,\n  0xb3a1: 0x41,\n  0xb3a2: 0x42,\n  0xb3a3: 0x43,\n  0xb3a4: 0x44,\n  0xb3a5: 0x45,\n  0xb3a6: 0x46,\n  0xb3a7: 0x47,\n  0xb3a8: 0x48,\n  0xb3a9: 0x49,\n  0xb3aa: 0x4a,\n  0xb3ab: 0x4b,\n  0xb3ac: 0x4c,\n  0xb3ad: 0x4d,\n  0xb3ae: 0x4e,\n  0xb3af: 0x4f,\n  0xb3b0: 0x50,\n  0xb3b1: 0x51,\n  0xb3b2: 0x52,\n  0xb3b3: 0x53,\n  0xb3b4: 0x54,\n  0xb3b5: 0x55,\n  0xb3b6: 0x56,\n  0xb3b7: 0x57,\n  0xb3b8: 0x58,\n  0xb3b9: 0x59,\n  0xb3ba: 0x5a,\n  0xb3bb: 0x5b,\n  0xb3bc: 0x5c,\n  0xb3bd: 0x5d,\n  0xb3be: 0x5e,\n  0xb3bf: 0x5f,\n  0xb3c0: 0x60,\n  0xb3c1: 0x61,\n  0xb3c2: 0x62,\n  0xb3c3: 0x63,\n  0xb3c4: 0x64,\n  0xb3c5: 0x65,\n  0xb3c6: 0x66,\n  0xb3c7: 0x67,\n  0xb3c8: 0x68,\n  0xb3c9: 0x69,\n  0xb3ca: 0x6a,\n  0xb3cb: 0x6b,\n  0xb3cc: 0x6c,\n  0xb3cd: 0x6d,\n  0xb3ce: 0x6e,\n  0xb3cf: 0x6f,\n  0xb3d0: 0x70,\n  0xb3d1: 0x71,\n  0xb3d2: 0x72,\n  0xb3d3: 0x73,\n  0xb3d4: 0x74,\n  0xb3d5: 0x75,\n  0xb3d6: 0x76,\n  0xb3d7: 0x77,\n  0xb3d8: 0x78,\n  0xb3d9: 0x79,\n  0xb3da: 0x7a,\n  0xb3db: 0x7b,\n  0xb3dc: 0x7c,\n  0xb3dd: 0x7d,\n  0xb3de: 0x7e,\n  0xb3df: 0x7f,\n  0xb3e0: 0x80\n})\n","module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n","module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n","\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n","'use strict'\n\nconst Base = require('./base.js')\nconst baseX = require('base-x')\nconst base16 = require('./base16')\nconst base32 = require('./base32')\nconst base64 = require('./base64')\n\n// name, code, implementation, alphabet\nconst constants = [\n  ['base1', '1', '', '1'],\n  ['base2', '0', baseX, '01'],\n  ['base8', '7', baseX, '01234567'],\n  ['base10', '9', baseX, '0123456789'],\n  ['base16', 'f', base16, '0123456789abcdef'],\n  ['base32', 'b', base32, 'abcdefghijklmnopqrstuvwxyz234567'],\n  ['base32pad', 'c', base32, 'abcdefghijklmnopqrstuvwxyz234567='],\n  ['base32hex', 'v', base32, '0123456789abcdefghijklmnopqrstuv'],\n  ['base32hexpad', 't', base32, '0123456789abcdefghijklmnopqrstuv='],\n  ['base32z', 'h', base32, 'ybndrfg8ejkmcpqxot1uwisza345h769'],\n  ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],\n  ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],\n  ['base64', 'm', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],\n  ['base64pad', 'M', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],\n  ['base64url', 'u', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],\n  ['base64urlpad', 'U', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']\n]\n\nconst names = constants.reduce((prev, tupple) => {\n  prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3])\n  return prev\n}, {})\n\nconst codes = constants.reduce((prev, tupple) => {\n  prev[tupple[1]] = names[tupple[0]]\n  return prev\n}, {})\n\nmodule.exports = {\n  names: names,\n  codes: codes\n}\n","'use strict'\n\nclass Base {\n  constructor (name, code, implementation, alphabet) {\n    this.name = name\n    this.code = code\n    this.alphabet = alphabet\n    if (implementation && alphabet) {\n      this.engine = implementation(alphabet)\n    }\n  }\n\n  encode (stringOrBuffer) {\n    return this.engine.encode(stringOrBuffer)\n  }\n\n  decode (stringOrBuffer) {\n    return this.engine.decode(stringOrBuffer)\n  }\n\n  isImplemented () {\n    return this.engine\n  }\n}\n\nmodule.exports = Base\n","'use strict'\n\nmodule.exports = function base16 (alphabet) {\n  return {\n    encode (input) {\n      if (typeof input === 'string') {\n        return Buffer.from(input).toString('hex')\n      }\n      return input.toString('hex')\n    },\n    decode (input) {\n      for (let char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base16 character')\n        }\n      }\n      return Buffer.from(input, 'hex')\n    }\n  }\n}\n","'use strict'\n\nfunction decode (input, alphabet) {\n  input = input.replace(new RegExp('=', 'g'), '')\n  let length = input.length\n\n  let bits = 0\n  let value = 0\n\n  let index = 0\n  let output = new Uint8Array((length * 5 / 8) | 0)\n\n  for (let i = 0; i < length; i++) {\n    value = (value << 5) | alphabet.indexOf(input[i])\n    bits += 5\n\n    if (bits >= 8) {\n      output[index++] = (value >>> (bits - 8)) & 255\n      bits -= 8\n    }\n  }\n\n  return output.buffer\n}\n\nfunction encode (buffer, alphabet) {\n  let length = buffer.byteLength\n  let view = new Uint8Array(buffer)\n  let padding = alphabet.indexOf('=') === alphabet.length - 1\n\n  if (padding) {\n    alphabet = alphabet.substring(0, alphabet.length - 2)\n  }\n\n  let bits = 0\n  let value = 0\n  let output = ''\n\n  for (let i = 0; i < length; i++) {\n    value = (value << 8) | view[i]\n    bits += 8\n\n    while (bits >= 5) {\n      output += alphabet[(value >>> (bits - 5)) & 31]\n      bits -= 5\n    }\n  }\n\n  if (bits > 0) {\n    output += alphabet[(value << (5 - bits)) & 31]\n  }\n\n  if (padding) {\n    while ((output.length % 8) !== 0) {\n      output += '='\n    }\n  }\n\n  return output\n}\n\nmodule.exports = function base32 (alphabet) {\n  return {\n    encode (input) {\n      if (typeof input === 'string') {\n        return encode(Buffer.from(input), alphabet)\n      }\n\n      return encode(input, alphabet)\n    },\n    decode (input) {\n      for (let char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base32 character')\n        }\n      }\n\n      return decode(input, alphabet)\n    }\n  }\n}\n","'use strict'\n\nmodule.exports = function base64 (alphabet) {\n  // The alphabet is only used to know:\n  //   1. If padding is enabled (must contain '=')\n  //   2. If the output must be url-safe (must contain '-' and '_')\n  //   3. If the input of the output function is valid\n  // The alphabets from RFC 4648 are always used.\n  const padding = alphabet.indexOf('=') > -1\n  const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1\n\n  return {\n    encode (input) {\n      let output = ''\n\n      if (typeof input === 'string') {\n        output = Buffer.from(input).toString('base64')\n      } else {\n        output = input.toString('base64')\n      }\n\n      if (url) {\n        output = output.replace('+', '-')\n        output = output.replace('/', '_')\n      }\n\n      const pad = output.indexOf('=')\n      if (pad > 0 && !padding) {\n        output = output.substring(0, pad)\n      }\n\n      return output\n    },\n    decode (input) {\n      if (url) {\n        input = input.replace('+', '-')\n        input = input.replace('/', '_')\n      }\n\n      for (let char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base64 character')\n        }\n      }\n\n      return Buffer.from(input, 'base64')\n    }\n  }\n}\n","'use strict'\n\nconst mh = require('multihashes')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst codecs = require('multicodec/src/base-table')\nconst codecVarints = require('multicodec/src/varint-table')\nconst multihash = require('multihashes')\nconst CIDUtil = require('./cid-util')\n\n/**\n * @typedef {Object} SerializedCID\n * @param {string} codec\n * @param {number} version\n * @param {Buffer} multihash\n *\n */\n\n/**\n * Class representing a CID `<mbase><version><mcodec><mhash>`\n * , as defined in [ipld/cid](https://github.com/ipld/cid).\n * @class CID\n */\nclass CID {\n  /**\n   * Create a new CID.\n   *\n   * The algorithm for argument input is roughly:\n   * ```\n   * if (str)\n   *   if (1st char is on multibase table) -> CID String\n   *   else -> bs58 encoded multihash\n   * else if (Buffer)\n   *   if (0 or 1) -> CID\n   *   else -> multihash\n   * else if (Number)\n   *   -> construct CID by parts\n   *\n   * ..if only JS had traits..\n   * ```\n   *\n   * @param {string|Buffer} version\n   * @param {string} [codec]\n   * @param {Buffer} [multihash]\n   *\n   * @example\n   *\n   * new CID(<version>, <codec>, <multihash>)\n   * new CID(<cidStr>)\n   * new CID(<cid.buffer>)\n   * new CID(<multihash>)\n   * new CID(<bs58 encoded multihash>)\n   * new CID(<cid>)\n   *\n   */\n  constructor (version, codec, multihash) {\n    if (CID.isCID(version)) {\n      let cid = version\n      this.version = cid.version\n      this.codec = cid.codec\n      this.multihash = Buffer.from(cid.multihash)\n      return\n    }\n    if (typeof version === 'string') {\n      if (multibase.isEncoded(version)) { // CID String (encoded with multibase)\n        const cid = multibase.decode(version)\n        version = parseInt(cid.slice(0, 1).toString('hex'), 16)\n        codec = multicodec.getCodec(cid.slice(1))\n        multihash = multicodec.rmPrefix(cid.slice(1))\n      } else { // bs58 string encoded multihash\n        codec = 'dag-pb'\n        multihash = mh.fromB58String(version)\n        version = 0\n      }\n    } else if (Buffer.isBuffer(version)) {\n      const firstByte = version.slice(0, 1)\n      const v = parseInt(firstByte.toString('hex'), 16)\n      if (v === 0 || v === 1) { // CID\n        const cid = version\n        version = v\n        codec = multicodec.getCodec(cid.slice(1))\n        multihash = multicodec.rmPrefix(cid.slice(1))\n      } else { // multihash\n        codec = 'dag-pb'\n        multihash = version\n        version = 0\n      }\n    }\n\n    /**\n     * @type {string}\n     */\n    this.codec = codec\n\n    /**\n     * @type {number}\n     */\n    this.version = version\n\n    /**\n     * @type {Buffer}\n     */\n    this.multihash = multihash\n\n    CID.validateCID(this)\n  }\n\n  /**\n   * The CID as a `Buffer`\n   *\n   * @return {Buffer}\n   * @readonly\n   *\n   * @memberOf CID\n   */\n  get buffer () {\n    switch (this.version) {\n      case 0:\n        return this.multihash\n      case 1:\n        return Buffer.concat([\n          Buffer.from('01', 'hex'),\n          Buffer.from(codecVarints[this.codec]),\n          this.multihash\n        ])\n      default:\n        throw new Error('unsupported version')\n    }\n  }\n\n  /**\n   * Get the prefix of the CID.\n   *\n   * @returns {Buffer}\n   * @readonly\n   */\n  get prefix () {\n    return Buffer.concat([\n      Buffer.from(`0${this.version}`, 'hex'),\n      codecVarints[this.codec],\n      multihash.prefix(this.multihash)\n    ])\n  }\n\n  /**\n   * Convert to a CID of version `0`.\n   *\n   * @returns {CID}\n   */\n  toV0 () {\n    if (this.codec !== 'dag-pb') {\n      throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n    }\n\n    return new CID(0, this.codec, this.multihash)\n  }\n\n  /**\n   * Convert to a CID of version `1`.\n   *\n   * @returns {CID}\n   */\n  toV1 () {\n    return new CID(1, this.codec, this.multihash)\n  }\n\n  /**\n   * Encode the CID into a string.\n   *\n   * @param {string} [base='base58btc'] - Base encoding to use.\n   * @returns {string}\n   */\n  toBaseEncodedString (base) {\n    base = base || 'base58btc'\n\n    switch (this.version) {\n      case 0: {\n        if (base !== 'base58btc') {\n          throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()')\n        }\n        return mh.toB58String(this.multihash)\n      }\n      case 1:\n        return multibase.encode(base, this.buffer).toString()\n      default:\n        throw new Error('Unsupported version')\n    }\n  }\n\n  /**\n   * Serialize to a plain object.\n   *\n   * @returns {SerializedCID}\n   */\n  toJSON () {\n    return {\n      codec: this.codec,\n      version: this.version,\n      hash: this.multihash\n    }\n  }\n\n  /**\n   * Compare equality with another CID.\n   *\n   * @param {CID} other\n   * @returns {bool}\n   */\n  equals (other) {\n    return this.codec === other.codec &&\n      this.version === other.version &&\n      this.multihash.equals(other.multihash)\n  }\n\n  /**\n   * Test if the given input is a CID.\n   *\n   * @param {any} other\n   * @returns {bool}\n   */\n  static isCID (other) {\n    return !(CIDUtil.checkCIDComponents(other))\n  }\n\n  /**\n   * Test if the given input is a valid CID object.\n   * Throws if it is not.\n   *\n   * @param {any} other\n   * @returns {void}\n   */\n  static validateCID (other) {\n    let errorMsg = CIDUtil.checkCIDComponents(other)\n    if (errorMsg) {\n      throw new Error(errorMsg)\n    }\n  }\n}\n\nCID.codecs = codecs\n\nmodule.exports = CID\n","/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict'\n\nconst varint = require('varint')\nconst codecNameToCodeVarint = require('./varint-table')\nconst codeToCodecName = require('./name-table')\nconst util = require('./util')\n\nexports = module.exports\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {string|number} multicodecStrOrCode\n * @param {Buffer} data\n * @returns {Buffer}\n */\nexports.addPrefix = (multicodecStrOrCode, data) => {\n  let prefix\n\n  if (Buffer.isBuffer(multicodecStrOrCode)) {\n    prefix = util.varintBufferEncode(multicodecStrOrCode)\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode]\n    } else {\n      throw new Error('multicodec not recognized')\n    }\n  }\n  return Buffer.concat([prefix, data])\n}\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Buffer} data\n * @returns {Buffer}\n */\nexports.rmPrefix = (data) => {\n  varint.decode(data)\n  return data.slice(varint.decode.bytes)\n}\n\n/**\n * Get the codec of the prefixed data.\n * @param {Buffer} prefixedData\n * @returns {string}\n */\nexports.getCodec = (prefixedData) => {\n  const code = util.varintBufferDecode(prefixedData)\n  const codecName = codeToCodecName[code.toString('hex')]\n  if (codecName === undefined) {\n    throw new Error('Code `0x' + code.toString('hex') + '` not found')\n  }\n  return codecName\n}\n\n/**\n * Get the code as varint of a codec name.\n * @param {string} codecName\n * @returns {Buffer}\n */\nexports.getCodeVarint = (codecName) => {\n  const code = codecNameToCodeVarint[codecName]\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found')\n  }\n  return code\n}\n\n/**\n * Add a new codec\n * @param {string} name Name of the codec\n * @param {Buffer} code The code of the codec\n * @returns {void}\n */\nexports.addCodec = (name, code) => {\n  codecNameToCodeVarint[name] = util.varintBufferEncode(code)\n  codeToCodecName[code.toString('hex')] = name\n}\n","'use strict'\nconst baseTable = require('./base-table')\n\n// this creates a map for code as hexString -> codecName\n\nconst nameTable = {}\nmodule.exports = nameTable\n\nfor (let encodingName in baseTable) {\n  let code = baseTable[encodingName]\n  nameTable[code.toString('hex')] = encodingName\n}\n","'use strict'\n\nconst mh = require('multihashes')\n\nvar CIDUtil = {\n  /**\n   * Test if the given input is a valid CID object.\n   * Returns an error message if it is not.\n   * Returns undefined if it is a valid CID.\n   *\n   * @param {any} other\n   * @returns {string}\n   */\n  checkCIDComponents: function (other) {\n    if (other == null) {\n      return 'null values are not valid CIDs'\n    }\n\n    if (!(other.version === 0 || other.version === 1)) {\n      return 'Invalid version, must be a number equal to 1 or 0'\n    }\n\n    if (typeof other.codec !== 'string') {\n      return 'codec must be string'\n    }\n\n    if (!Buffer.isBuffer(other.multihash)) {\n      return 'multihash must be a Buffer'\n    }\n\n    try {\n      mh.validate(other.multihash)\n    } catch (err) {\n      let errorMsg = err.message\n      if (!errorMsg) { // Just in case mh.validate() throws an error with empty error message\n        errorMsg = 'Multihash validation failed'\n      }\n      return errorMsg\n    }\n  }\n}\n\nmodule.exports = CIDUtil\n"],"sourceRoot":""}